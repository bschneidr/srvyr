[{"path":"http://gdfe.co/srvyr/articles/extending-srvyr.html","id":"translating-from-survey-to-srvyr","dir":"Articles","previous_headings":"","what":"Translating from survey to srvyr","title":"Extending srvyr","text":"srvyr implements “survey statistics” functions survey package. examples svymean, svytotal, svyciprop, svyquantile svyratio return svystat object usually prints estimate standard error estimates variance can calculated . srvyr, estimates created inside summarize call variance estimates specified time. combination srvyr’s group_by summarize analogous svyby function performs one survey statistic function performs multiple groups. However, srvyr 1.0, srvyr longer uses svyby, instead survey object split group’s","code":""},{"path":"http://gdfe.co/srvyr/articles/extending-srvyr.html","id":"what-summarize-expects","dir":"Articles","previous_headings":"","what":"What summarize expects","title":"Extending srvyr","text":"srvyr’s summarize expects survey statistics functions return objects formatted particular way. , ’ll explain functions help create objects cases, return : srvyr_result_df object (just wrapper around data.frame) Generally 1 row ungrouped, 1 row per group, longer required. names based argument name summarize call name can’t provided functions. Instead, summarize renaming function name variables “coef” (renamed parameter name) suffix appended parameter name.","code":""},{"path":"http://gdfe.co/srvyr/articles/extending-srvyr.html","id":"helper-functions-exported-by-srvyr","dir":"Articles","previous_headings":"","what":"Helper functions exported by srvyr","title":"Extending srvyr","text":"srvyr now exports several functions can help convert functions designed survey package format. cur_svy() - function, modeled dplyr::current_vars(), hidden way send survey object object (hidden, mean user doesn’t specify survey arguments function call). use , can now directly call cur_svy() inside function. survey includes current group’s survey data. cur_svy_full() - Like cur_svy(), includes full survey data intead just current group’s data. cur_svy_wts() - helper function provides access full-sample weights current group’s data. set_survey_vars() - Many survey functions limited support supplying formula indicating variables calculate statistic well vector. However, oftentimes vector version less well supported formula version. Since srvyr uses dplyr semantics, ends returning values vectors. function add variable survey, defaulting name “__SRVYR_TEMP_VAR__”. get_var_est() - helper function calculates variance estimates like standard error (se), confidence interval (ci), variance (var), coefficient variance (cv). functions support , separate argument design effects (match survey’s conventions). as_srvyr_result_df() - helper function adds srvyr_result_df class data.frame Note functions may work cases. srvyr, ’ve actually write multiple versions get_var_est() minor differences way survey objects returned. Hopefully help situations, least give good place start.","code":""},{"path":"http://gdfe.co/srvyr/articles/extending-srvyr.html","id":"miscellaneous-conventions","dir":"Articles","previous_headings":"","what":"Miscellaneous conventions","title":"Extending srvyr","text":"Two less important conventions srvyr functions follow : snake_case function names (better match tidyverse) Multiple choice arguments default first (var_type, parameters specified, use “se” ).","code":""},{"path":"http://gdfe.co/srvyr/articles/extending-srvyr.html","id":"example-conveysvygini---survey_gini","dir":"Articles","previous_headings":"","what":"Example: convey::svygini -> survey_gini","title":"Extending srvyr","text":"just lot text, think ’s probably easiest just provide example. convey package provides several methods analysis inequality using survey data. svygini function calculates gini coefficient. , ’ll write functions make srvyr version survey_gini. ’s function looks like practice:","code":"# S3 generic function survey_gini <- function(   x, na.rm = FALSE, vartype = c(\"se\", \"ci\", \"var\", \"cv\"), ... ) {   if (missing(vartype)) vartype <- \"se\"   vartype <- match.arg(vartype, several.ok = TRUE)   .svy <- srvyr::set_survey_vars(srvyr::cur_svy(), x)      out <- convey::svygini(~`__SRVYR_TEMP_VAR__`, na.rm = na.rm, design = .svy)   out <- srvyr::get_var_est(out, vartype)   as_srvyr_result_df(out) } # Example from ?convey::svygini suppressPackageStartupMessages({   library(srvyr)   library(survey)   library(convey)   library(laeken) }) data(eusilc) ; names( eusilc ) <- tolower( names( eusilc ) )  # Setup for survey package des_eusilc <- svydesign(   ids = ~rb030,    strata = ~db040,     weights = ~rb050,    data = eusilc ) des_eusilc <- convey_prep(des_eusilc)  # Setup for srvyr package srvyr_eusilc <- eusilc %>%    as_survey(     ids = rb030,     strata = db040,     weights = rb050   ) %>%   convey_prep()  ## Ungrouped # Calculate ungrouped for survey package svygini(~eqincome, design = des_eusilc) #>             gini     SE #> eqincome 0.26497 0.0019  # Use new function from summarize srvyr_eusilc %>%    summarize(eqincome = survey_gini(eqincome)) #> # A tibble: 1 × 2 #>   eqincome eqincome_se #>      <dbl>       <dbl> #> 1    0.265     0.00195  ## Groups # Calculate by groups for survey survey::svyby(~eqincome, ~rb090, des_eusilc, convey::svygini) #>         rb090  eqincome          se #> male     male 0.2578983 0.002617279 #> female female 0.2702080 0.002892713  # Use new function from summarize srvyr_eusilc %>%    group_by(rb090) %>%   summarize(eqincome = survey_gini(eqincome)) #> # A tibble: 2 × 3 #>   rb090  eqincome eqincome_se #>   <fct>     <dbl>       <dbl> #> 1 male      0.258     0.00262 #> 2 female    0.270     0.00289"},{"path":"http://gdfe.co/srvyr/articles/srvyr-database.html","id":"database-setup","dir":"Articles","previous_headings":"","what":"Database Setup","title":"Databases in srvyr","text":"order focus srvyr databases, start prepared dataset. full code available Github, high level description : Download data acs website (currently Alaska Hawaii save time, though easy adapt download 50 states Puerto Rico). Merges household person datasets can look variables related person including household level Selects variables used analysis save space, easily adapted keep variables. information specifics American Community Survey, see asdfree site. Now, code loads prepared dataset, initiates SQLite database, puts data dataset. Now data database, can interact database directly using sql commands, can use dplyr’s functionality treat mostly local data.frame. However, data stored memory, work much larger datasets (though case, data small problem). Note though many commands behave exactly whether local data.frame database, sometimes advanced / complicated syntax around variable modification allowed dplyr work particular database better explicit. example, creating variable inside summarize call work databases. . , sometimes working variable types can get difficult used working R. Notice , instead hicov = (hicov == 1), wrote ifelse statement. hadn’t RSQLite unable calculate mean boolean variable created. Finally, major difference transitioning dplyr local data.frames R functions translated SQL. example, cut() isn’t implemented SQL, can’t create new variable data.frame using . information specifics databases dplyr, see vignette(\"database\", package = \"dplyr\"), DBI package specific database packages, like RSQLite.","code":"suppressMessages({   library(survey)   library(srvyr)   library(dplyr)   library(dbplyr)   library(RSQLite) })  # Load data (Currently only Alaska and Hawaii to keep file size small and with  # limited variables, butcode that downloaded the files is available here # https://github.com/gergness/srvyr/blob/main/vignettes/save_acs_data.R # and could easily be adapted to download all states.) load(\"acs_m.Rdata\") # acs_m data  # Set up database and table db <- DBI::dbConnect(RSQLite::SQLite(), \":memory:\") acs_m_db <- copy_to(db, acs_m, \"acs_m\", temporary = FALSE)  # Or, if the data was already stored in the database, you could do this # acs_m_data <- tbl(db, sql(\"SELECT * FROM acs_m\")) # Same results acs_m %>%    group_by(sex) %>%   summarize(hicov = mean(hicov))  acs_m_db %>%    group_by(sex) %>%   summarize(hicov = mean(hicov))  # But smaller object size object.size(acs_m) object.size(acs_m_db) acs_m %>%    group_by(sex) %>%   summarize(hicov = mean(hicov == 1))  # Works in RSQlite, but didn't in the now defunct MonetDB # acs_m_db %>%  #   group_by(sex) %>% #   summarize(hicov = mean(hicov == 1)) # # > Error in .local(conn, statement, ...) : # > Unable to execute statement.... # > ....  # Creating the variable separately works as an integer works though acs_m_db %>%    group_by(sex) %>%   mutate(hicov = ifelse(hicov == 1, 1L, 0L)) %>%   summarize(hicov = mean(hicov)) acs_m %>%    group_by(agecat = cut(agep, c(0, 19, 35, 50, 65, 200))) %>%   summarize(hicov = mean(hicov == 1))  # acs_m_db %>%  #   group_by(agecat = cut(agep, c(0, 19, 35, 50, 65, 200))) %>% #   summarize(hicov = mean(hicov == 1)) # # > Error in .local(conn, statement, ...) : # > Unable to execute statement.... # > ...  acs_m_db %>%    mutate(agecat = ifelse(agep < 19, \"0-18\",                           ifelse(agep >= 19 & agep < 35, \"19-34\",                                  ifelse(agep >= 35 & agep < 50, \"35-49\",                                         ifelse(agep >= 50 & agep < 65, \"50-64\",                                                ifelse(agep >= 65, \"65+\", NA)))))) %>%   group_by(agecat) %>%    summarize(hicov = mean(hicov))"},{"path":"http://gdfe.co/srvyr/articles/srvyr-database.html","id":"srvyr-setup","dir":"Articles","previous_headings":"","what":"Srvyr Setup","title":"Databases in srvyr","text":"Srvyr commands nearly identical old. difference setup need variable uniquely identifies row database (uid). srvyr stores survey variables locally, srvyr object takes much memory dplyr one. However, object grow size added data variables survey, survey wide, save lot space. large survey data sets replicate weights, strongly recommended specify value degf parameter as_survey_rep(): otherwise, survey package attempt automatically determine design degrees freedom using process can slow large data sets. value use degf often specified survey data documentation, common rule thumb number columns replicate weights.","code":"acs_m_db_svy <- acs_m_db %>%    as_survey_rep(     weight = pwgtp,     repweights = matches(\"pwgtp[0-9]+\") ,     scale = 4 / 80,     rscales = rep(1 , 80),     mse = TRUE,     type = \"JK1\",      variables = -c(matches(\"^pwgtp\"))   )  acs_m_db_svy object.size(acs_m_db_svy)"},{"path":"http://gdfe.co/srvyr/articles/srvyr-database.html","id":"analysis","dir":"Articles","previous_headings":"","what":"Analysis","title":"Databases in srvyr","text":"Analysis commands srvyr also similar ones work local data.frames. main differences come issues discussed explicitly creating variables difficulties translating R commands, variable types. following analysis based asdfree analysis shows basic analysis total population, insurance coverage, age sex.","code":"# You can calculate the population of the united states # # by state acs_m_db_svy %>%   mutate(one = 1L) %>% # Note that because of weird behavior of MonetDB, need to use 1L not just 1   group_by(st) %>%    summarize(count = survey_total(one))  # Or the average age of downloaded states acs_m_db_svy %>%   summarize(agep = survey_mean(agep, na.rm = TRUE))  # Average age by state acs_m_db_svy %>%   group_by(st) %>%    summarize(agep = survey_mean(agep, na.rm = TRUE))  # percent uninsured - nationwide (of downloaded states) acs_m_db_svy %>%   mutate(hicov = as.character(hicov)) %>%    group_by(hicov) %>%    summarize(pct = survey_mean(na.rm = TRUE))  # by state acs_m_db_svy %>%   mutate(hicov = as.character(hicov)) %>%    group_by(st, hicov) %>%    summarize(pct = survey_mean(na.rm = TRUE))   # 25th, median, and 75th percentile of age of residents of the united states (downloaded states) acs_m_db_svy %>%   summarize(agep = survey_quantile(agep, c(0.25, 0.5, 0.75), na.rm = TRUE))   # Filter works, so we can restrict the acs_m object to females only acs_m_db_svy_female <- acs_m_db_svy %>%   filter(sex == 2)  # Now any of the above commands can be re-run using the acs_m_female object # instead of the acs_m object in order to analyze females only  # This is equivalent to using acs_m, and applying the filter every time.  # average age - nationwide (of downloaded states), restricted to females acs_m_db_svy_female %>%   summarize(agep = survey_mean(agep, na.rm = TRUE))  # median age - nationwide (of downloaded states), restricted to females acs_m_db_svy_female %>%   summarize(agep = survey_median(agep, na.rm = TRUE))   # Note that though some R functions are translated by dplyr into SQL, not # all of them are. For example, when constructing a new age category  # variable in the dataset neither findIntervals nor cut work on databases,  # so we have to spell out groups with ifelse() acs_m_db_svy %>%    mutate(agecat = ifelse(agep < 19, \"0-18\",                           ifelse(agep >= 19 & agep < 35, \"19-34\",                                  ifelse(agep >= 35 & agep < 50, \"35-49\",                                         ifelse(agep >= 50 & agep < 65, \"50-64\",                                                ifelse(agep >= 65, \"65+\", NA)))))) %>%   group_by(agecat) %>%    summarize(pct = survey_mean(na.rm = TRUE))"},{"path":[]},{"path":"http://gdfe.co/srvyr/articles/srvyr-database.html","id":"running-survey-commands-with-collect","dir":"Articles","previous_headings":"Analysis > Advanced Topics","what":"Running survey commands with collect","title":"Databases in srvyr","text":"’d like run command survey package, ’ll need collect data locally first. can select variables ’ll need analysis don’t store whole dataset memory.","code":"acs_m_db_svy %>%   select(agep, hicov, sex) %>%   collect() %>%   {survey::svyglm(hicov ~ sex + agep, .)} %>%   summary()"},{"path":"http://gdfe.co/srvyr/articles/srvyr-database.html","id":"write-access","dir":"Articles","previous_headings":"Analysis > Advanced Topics","what":"Write Access","title":"Databases in srvyr","text":"Note srvyr require write access perform calculations, database created vignette set read-beginning. can important want make sure original data altered accidentally, don’t write access database.","code":""},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"motivating-example","dir":"Articles","previous_headings":"","what":"Motivating example","title":"`srvyr` compared to the `survey` package","text":"dplyr package made easy write code summarize data. example, wanted check year--year change academic progress indicator score varied school level percent parents high school graduates, can :  However, wanted add error bars graph capture uncertainty due sampling variation, completely rewrite dplyr code survey package. srvyr allows direct translation.","code":"library(survey) library(ggplot2) library(dplyr)  data(api)  out <- apistrat %>%   mutate(hs_grad_pct = cut(hsg, c(0, 20, 100), include.lowest = TRUE,                            labels = c(\"<20%\", \"20+%\"))) %>%   group_by(stype, hs_grad_pct) %>%   summarize(api_diff = weighted.mean(api00 - api99, pw),             n = n())  ggplot(data = out, aes(x = stype, y = api_diff, group = hs_grad_pct, fill = hs_grad_pct)) +   geom_col(stat = \"identity\", position = \"dodge\") +   geom_text(aes(y = 0, label = n), position = position_dodge(width = 0.9), vjust = -1) ## Warning in geom_col(stat = \"identity\", position = \"dodge\"): Ignoring ## unknown parameters: `stat`"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"preparing-a-survey-dataset","dir":"Articles","previous_headings":"","what":"Preparing a survey dataset","title":"`srvyr` compared to the `survey` package","text":"as_survey_design(), as_survey_rep() as_survey_twophase() analogous survey::svydesign(), survey::svrepdesign() survey::twophase() respectively. designed match dplyr’s style non-standard evaluation, accept bare column names instead formulas (~). also move data argument first, easier use magrittr pipes (%>%). srvyr functions also accept dplyr::select()’s special selection functions (starts_with(), one_of(), etc.), functions analogous: function as_survey() automatically choose three as_survey_* functions based arguments, can save keystrokes.","code":"library(srvyr)  # simple random sample srs_design_srvyr <- apisrs %>% as_survey_design(ids = 1, fpc = fpc)  srs_design_survey <- svydesign(ids = ~1, fpc = ~fpc, data = apisrs) # selecting variables to keep in the survey object (stratified example) strat_design_srvyr <- apistrat %>%   as_survey_design(1, strata = stype, fpc = fpc, weight = pw,                 variables = c(stype, starts_with(\"api\")))  strat_design_survey <- svydesign(~1, strata = ~stype, fpc = ~fpc,                                  variables = ~stype + api99 + api00 + api.stu,                                  weight = ~pw, data = apistrat) # simple random sample (again) srs_design_srvyr2 <- apisrs %>% as_survey(ids = 1, fpc = fpc)"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"data-manipulation","dir":"Articles","previous_headings":"","what":"Data manipulation","title":"`srvyr` compared to the `survey` package","text":"’ve set survey data, can use dplyr verbs mutate(), select(), filter() rename(). Note arrange() available, srvyr object expects stay order. two-table verbs full_join(), bind_rows(), etc. available srvyr objects either may implications survey design. need use functions, use earlier analysis pipeline, objects still stored data.frames.","code":"strat_design_srvyr <- strat_design_srvyr %>%   mutate(api_diff = api00 - api99) %>%   rename(api_students = api.stu)  strat_design_survey$variables$api_diff <- strat_design_survey$variables$api00 -   strat_design_survey$variables$api99 names(strat_design_survey$variables)[names(strat_design_survey$variables) == \"api.stu\"] <- \"api_students\""},{"path":[]},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"of-the-entire-population","dir":"Articles","previous_headings":"Summary statistics","what":"Of the entire population","title":"`srvyr` compared to the `survey` package","text":"srvyr also provides summarize() several survey-specific functions calculate summary statistics numeric variables: survey_mean(), survey_total(), survey_quantile() survey_ratio(). functions differ counterparts survey always return data.frame consistent format. , return variance-covariance matrix, flexible.","code":"# Using srvyr out <- strat_design_srvyr %>%   summarize(api_diff = survey_mean(api_diff, vartype = \"ci\"))  out ## # A tibble: 1 × 3 ##   api_diff api_diff_low api_diff_upp ##      <dbl>        <dbl>        <dbl> ## 1     32.9         28.8         36.9 # Using survey out <- svymean(~api_diff, strat_design_survey)  out ##            mean     SE ## api_diff 32.893 2.0511 confint(out) ##             2.5 %   97.5 % ## api_diff 28.87241 36.91262"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"by-group","dir":"Articles","previous_headings":"Summary statistics","what":"By group","title":"`srvyr` compared to the `survey` package","text":"srvyr also allows calculate statistics numeric variables group, using group_by().","code":"# Using srvyr strat_design_srvyr %>%   group_by(stype) %>%   summarize(api_increase = survey_total(api_diff >= 0),             api_decrease = survey_total(api_diff < 0)) ## # A tibble: 3 × 5 ##   stype api_increase api_increase_se api_decrease api_decrease_se ##   <fct>        <dbl>           <dbl>        <dbl>           <dbl> ## 1 E            4067.           119.         354.            119.  ## 2 H             498.            49.4        257.             49.4 ## 3 M             998.            19.9         20.4            19.9 # Using survey svyby(~api_diff >= 0, ~stype, strat_design_survey, svytotal) ##   stype api_diff >= 0FALSE api_diff >= 0TRUE se.api_diff >= 0FALSE ## E     E             353.68           4067.32             119.17185 ## H     H             256.70            498.30              49.37208 ## M     M              20.36            997.64              19.85371 ##   se.api_diff >= 0TRUE ## E            119.17185 ## H             49.37208 ## M             19.85371"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"proportions-by-group","dir":"Articles","previous_headings":"Summary statistics","what":"Proportions by group","title":"`srvyr` compared to the `survey` package","text":"can also calculate proportion count group factor character variable leaving x empty survey_mean() survey_total().","code":"# Using srvyr srs_design_srvyr %>%   group_by(awards) %>%   summarize(proportion = survey_mean(),             total = survey_total()) ## # A tibble: 2 × 5 ##   awards proportion proportion_se total total_se ##   <fct>       <dbl>         <dbl> <dbl>    <dbl> ## 1 No           0.38        0.0338 2354.     210. ## 2 Yes          0.62        0.0338 3840.     210. # Using survey svymean(~awards, srs_design_survey) ##           mean     SE ## awardsNo  0.38 0.0338 ## awardsYes 0.62 0.0338 svytotal(~awards, srs_design_survey) ##            total     SE ## awardsNo  2353.7 209.65 ## awardsYes 3840.3 209.65"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"unweighted-calculations","dir":"Articles","previous_headings":"Summary statistics","what":"Unweighted calculations","title":"`srvyr` compared to the `survey` package","text":"Finally, unweighted() function can act escape hatch calculate unweighted calculations dataset.","code":"# Using srvyr strat_design_srvyr %>%   group_by(stype) %>%   summarize(n = unweighted(n())) ## # A tibble: 3 × 2 ##   stype     n ##   <fct> <int> ## 1 E       100 ## 2 H        50 ## 3 M        50 # Using survey svyby(~api99, ~stype, strat_design_survey, unwtd.count) ##   stype counts se ## E     E    100  0 ## H     H     50  0 ## M     M     50  0"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"back-to-the-example","dir":"Articles","previous_headings":"","what":"Back to the example","title":"`srvyr` compared to the `survey` package","text":"now, tools needed create first graph add error bounds. Notice data manipulation code nearly identical dplyr code, little extra set , replacing weighted.mean() survey_mean.","code":"strat_design <- apistrat %>%   as_survey_design(strata = stype, fpc = fpc, weight  = pw)  out <- strat_design %>%   mutate(hs_grad_pct = cut(hsg, c(0, 20, 100), include.lowest = TRUE,                            labels = c(\"<20%\", \"20+%\"))) %>%   group_by(stype, hs_grad_pct) %>%   summarize(api_diff = survey_mean(api00 - api99, vartype = \"ci\"),             n = unweighted(n()))  ggplot(data = out, aes(x = stype, y = api_diff, group = hs_grad_pct, fill = hs_grad_pct,                        ymax = api_diff_upp, ymin = api_diff_low)) +   geom_col(stat = \"identity\", position = \"dodge\") +   geom_errorbar(position = position_dodge(width = 0.9), width = 0.1) +   geom_text(aes(y = 0, label = n), position = position_dodge(width = 0.9), vjust = -1) ## Warning in geom_col(stat = \"identity\", position = \"dodge\"): Ignoring ## unknown parameters: `stat`"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"comparison-to-the-survey-package-degrees-of-freedom","dir":"Articles","previous_headings":"","what":"Comparison to the survey package (Degrees of freedom)","title":"`srvyr` compared to the `survey` package","text":"part, srvyr tries drop-replacement survey package, changing syntax wrote. However, way calculations degrees freedom calculating confidence intervals different. srvyr assumes want use true degrees freedom default, survey package uses Inf default. can use argument df get result survey package.","code":"# Set pillar print methods so tibble has more decimal places old_sigfig <- options(\"pillar.sigfig\") options(\"pillar.sigfig\" = 5)  # survey default estimate <- svymean(~api99, strat_design) confint(estimate) ##          2.5 %   97.5 % ## api99 609.8659 648.9238 # srvyr default strat_design %>%   summarize(x = survey_mean(api99, vartype = \"ci\")) ## # A tibble: 1 × 3 ##        x  x_low  x_upp ##    <dbl>  <dbl>  <dbl> ## 1 629.39 609.75 649.04 # setting the degrees of freedom so srvyr matches survey default strat_design %>%   summarize(x = survey_mean(api99, vartype = \"ci\", df = Inf)) %>%   print() ## # A tibble: 1 × 3 ##        x  x_low  x_upp ##    <dbl>  <dbl>  <dbl> ## 1 629.39 609.87 648.92 # setting the degrees of freedom so survey matches survey default confint(estimate, df = degf(strat_design)) ##          2.5 %   97.5 % ## api99 609.7452 649.0445 # reset significant figures options(\"pillar.sigfig\" = old_sigfig)"},{"path":[]},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"using-survey-functions-on-srvyr-objects","dir":"Articles","previous_headings":"Grab Bag","what":"Using survey functions on srvyr objects","title":"`srvyr` compared to the `survey` package","text":"srvyr objects just survey objects extra structure, functions survey still work . need calculate something beyond simple summary statistics, can use survey functions.","code":"glm <- svyglm(api00 ~ ell + meals + mobility, design = strat_design) summary(glm) ##  ## Call: ## svyglm(formula = api00 ~ ell + meals + mobility, design = strat_design) ##  ## Survey design: ## Called via srvyr ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) 820.8873    10.0777  81.456   <2e-16 *** ## ell          -0.4806     0.3920  -1.226    0.222     ## meals        -3.1415     0.2839 -11.064   <2e-16 *** ## mobility      0.2257     0.3932   0.574    0.567     ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## (Dispersion parameter for gaussian family taken to be 5171.966) ##  ## Number of Fisher Scoring iterations: 2"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"using-expressions-to-create-variables-on-the-fly","dir":"Articles","previous_headings":"Grab Bag","what":"Using expressions to create variables on the fly","title":"`srvyr` compared to the `survey` package","text":"Like dplyr, srvyr allows use expressions arguments, allowing create variables single step. example, can use expressions: arguments inside survey statistic functions like survey_mean argument summarize can even create variables inside group_by Though --fly expressions syntactically valid, possible make statistically invalid numbers . example, though standard error confidence intervals can multiplied scalar (like 100), variance scale way, following invalid:","code":"strat_design %>%   summarize(prop_api99_over_700 = survey_mean(api99 > 700)) ## # A tibble: 1 × 2 ##   prop_api99_over_700 prop_api99_over_700_se ##                 <dbl>                  <dbl> ## 1               0.306                 0.0356 strat_design %>%   group_by(awards) %>%   summarize(percentage = 100 * survey_mean()) ## # A tibble: 2 × 3 ##   awards percentage percentage_se ##   <fct>       <dbl>         <dbl> ## 1 No           36.1          3.44 ## 2 Yes          63.9          3.44 strat_design %>%   group_by(api99_above_700 = api99 > 700) %>%   summarize(api00_mn = survey_mean(api00)) ## # A tibble: 2 × 3 ##   api99_above_700 api00_mn api00_mn_se ##   <lgl>              <dbl>       <dbl> ## 1 FALSE               599.        7.88 ## 2 TRUE                805.        7.15 # BAD DON'T DO THIS! strat_design %>%   group_by(awards) %>%   summarize(percentage = 100 * survey_mean(vartype = \"var\")) # VARIANCE IS WRONG"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"non-standard-evaluation","dir":"Articles","previous_headings":"Grab Bag","what":"Non-Standard evaluation","title":"`srvyr` compared to the `survey` package","text":"Srvyr supports non-standard evaluation conventions dplyr uses. ’d like use function programmatically, can use functions rlang like {{ operator (aka “curly curly”) rlang. ’s quick example, please see dplyr vignette vignette(\"programming\", package = \"dplyr\") details. Srvyr also follow dplyr’s lead deprecating old methods NSE, rlang::quo, !!, addition -called “underscore functions” (like summarize_). Currently, soft-deprecated, may removed altogether future version srvyr.","code":"mean_with_ci <- function(.data, var) {   summarize(.data, mean = survey_mean({{var}}, vartype = \"ci\")) }  srs_design_srvyr <- apisrs %>% as_survey_design(fpc = fpc)  mean_with_ci(srs_design_srvyr, api99) ## # A tibble: 1 × 3 ##    mean mean_low mean_upp ##   <dbl>    <dbl>    <dbl> ## 1  625.     606.     643."},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"working-column-wise","dir":"Articles","previous_headings":"Grab Bag","what":"Working column-wise","title":"`srvyr` compared to the `survey` package","text":"version 1.0 srvyr, supports dplyr’s across function, want calculate statistic one variable, easy . See vignette(\"colwise\", package = \"dplyr\") details, another quick example: Srvyr also supports older methods working column-wise, “scoped variants”, summarize_at, summarize_if, summarize_all summarize_each. , maintained backwards compatibility, matching tidyverse team done, may removed future version.","code":"# Calculate survey mean for all variables that have names starting with \"api\" strat_design %>%   summarize(across(starts_with(\"api\"), survey_mean)) ## # A tibble: 1 × 6 ##   api00 api00_se api99 api99_se api.stu api.stu_se ##   <dbl>    <dbl> <dbl>    <dbl>   <dbl>      <dbl> ## 1  662.     9.41  629.     9.96    498.       16.1"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"calculating-proportions-in-groups","dir":"Articles","previous_headings":"Grab Bag","what":"Calculating proportions in groups","title":"`srvyr` compared to the `survey` package","text":"can calculate weighted proportion falls group using survey_prop() function (survey_mean() function x argument). proportion calculated “unpeeling” last variable used group_by() calculating proportion within groups fall last group (proportion within group unpeeled sums 100%). want calculate proportion groups multiple variables time add 100%, interact function can help. interact function creates variable automatically split apart one variable can unpeeled.","code":"# Calculate the proportion that falls into each category of `awards` per `stype` strat_design %>%   group_by(stype, awards) %>%   summarize(prop = survey_prop()) ## When `proportion` is unspecified, `survey_prop()` now defaults to `proportion = TRUE`. ## ℹ This should improve confidence interval coverage. ## This message is displayed once per session. ## # A tibble: 6 × 4 ## # Groups:   stype [3] ##   stype awards  prop prop_se ##   <fct> <fct>  <dbl>   <dbl> ## 1 E     No     0.270  0.0441 ## 2 E     Yes    0.730  0.0441 ## 3 H     No     0.680  0.0644 ## 4 H     Yes    0.320  0.0644 ## 5 M     No     0.520  0.0696 ## 6 M     Yes    0.480  0.0696 # Calculate the proportion that falls into each category of both `awards` and `stype` strat_design %>%   group_by(interact(stype, awards)) %>%   summarize(prop = survey_prop()) ## # A tibble: 6 × 4 ##   stype awards   prop prop_se ##   <fct> <fct>   <dbl>   <dbl> ## 1 E     No     0.193  0.0315  ## 2 E     Yes    0.521  0.0315  ## 3 H     No     0.0829 0.00785 ## 4 H     Yes    0.0390 0.00785 ## 5 M     No     0.0855 0.0114  ## 6 M     Yes    0.0789 0.0114"},{"path":"http://gdfe.co/srvyr/articles/srvyr-vs-survey.html","id":"learning-more","dir":"Articles","previous_headings":"","what":"Learning More","title":"`srvyr` compared to the `survey` package","text":"free resources put together community srvyr: Stephanie Zimmer, Rebecca Powell Isabella Velásquez’s book Exploring Complex Survey Data Analysis Using R (releasing November 2024). See also 2021 AAPOR Workshop “Tidy Survey Analysis R using srvyr Package” “Epidemiologist R Handbook”, Neale Batra et al. chapter survey analysis srvyr survey package examples Kieran Healy’s book “Data Visualization: Practical Introduction” section using srvyr visualize ESS. IPUMS PMA team’s blog series showing examples using PMA COVID survey panel weights “Open Case Studies: Vaping Behaviors American Youth” Carrie Wright, Michael Ontiveros, Leah Jager, Margaret Taub, Stephanie Hicks detailed case study includes using srvyr analyze National Youth Tobacco Survey. “plot Likert scales weighted survey dplyr friendly way” Francisco Suárez Salas tidycensus package vignette “Working Census microdata” includes information using weights ACS retrieved census API. “Joy Calculating Direct Standard Error PUMS Estimates” GitHub user @ldaly Thomas Lumley’s book “Complex Surveys: guide analysis using R” Chris Skinner. Jon Wakefield. “Introduction Design Analysis Complex Survey Data.” Statist. Sci. 32 (2) 165 - 175, May 2017. 10.1214/17-STS614 Sharon Lohr’s textbook “Sampling: Design Analysis”. Second Third Editions “Survey weighting mess” opening Andrew Gelman’s “Struggles Survey Weighting Regression Modeling” Anthony Damico’s website “Analyze Survey Data Free” weight specifications wide variety public use survey datasets. dplyr’s included package vignettes “Column-wise operations” & “Programming dplyr” Em português: “Análise de Dados Amostrais Complexos” Djalma Pessoa Pedro Nascimento Silva En español: “Usando R para jugar con los microdatos del INEGI” Claudio Daniel Pacheco Castro Tiếng Việt: “Dịch tễ học ứng dụng và y tế công cộng với R” På norsk: Data med vekter R Øyvind Bugge Solheim (free) graphical interface allowing exploratory data analysis survey data without writing code: iNZight (survey data instructions) “serosurvey: Serological Survey Analysis Prevalence Estimation Misclassification” Andree Valle Campos Several packages CRAN depend srvyr, can see looking reverse Imports/Suggestions CRAN. Still need help? think best way get help form specific question ask place like posit’s community website (known ’s friendly community) stackoverflow.com (maybe known quite friendly, probably people). think ’ve found bug srvyr’s code, please file issue GitHub, note ’m great resource helping specific issue, limited capacity also consider expert statistical methods behind survey analysis. something add? resources mostly found via vanity searches twitter & github. know anything missed, written something , please let know GitHub issue!","code":""},{"path":"http://gdfe.co/srvyr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Greg Freedman Ellis. Author, maintainer. Thomas Lumley. Contributor. Tomasz Żółtak. Contributor. Ben Schneider. Author, contributor. Pavel N. Krivitsky. Contributor.","code":""},{"path":"http://gdfe.co/srvyr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Freedman Ellis G, Schneider B (2024). srvyr: 'dplyr'-Like Syntax Summary Statistics Survey Data. R package version 1.3.0.9000, https://github.com/gergness/srvyr/, http://gdfe.co/srvyr/.","code":"@Manual{,   title = {srvyr: 'dplyr'-Like Syntax for Summary Statistics of Survey Data},   author = {Greg {Freedman Ellis} and Ben Schneider},   year = {2024},   note = {R package version 1.3.0.9000, https://github.com/gergness/srvyr/},   url = {http://gdfe.co/srvyr/}, }"},{"path":"http://gdfe.co/srvyr/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"http://gdfe.co/srvyr/index.html","id":"srvyr-","dir":"","previous_headings":"","what":"dplyr-Like Syntax for Summary Statistics of Survey Data","title":"dplyr-Like Syntax for Summary Statistics of Survey Data","text":"srvyr brings parts dplyr’s syntax survey analysis, using survey package. srvyr focuses calculating summary statistics survey data, mean, total quantile. allows use many dplyr verbs, summarize, group_by, mutate, convenience pipe-able functions, rlang’s style non-standard evaluation consistent return types survey package. can try :","code":"install.packages(\"srvyr\") # or for development version # remotes::install_github(\"gergness/srvyr\")"},{"path":"http://gdfe.co/srvyr/index.html","id":"example-usage","dir":"","previous_headings":"","what":"Example usage","title":"dplyr-Like Syntax for Summary Statistics of Survey Data","text":"First, describe variables define survey’s structure function as_survey()bare column names names use functions survey package like survey::svydesign(), survey::svrepdesign() survey::twophase(). Now many dplyr verbs available. mutate() adds modifies variable. summarise() calculates summary statistics mean, total, quantile ratio. group_by() summarise() creates summaries groups. Functions survey package still available:","code":"library(srvyr, warn.conflicts = FALSE) data(api, package = \"survey\")  dstrata <- apistrat %>%    as_survey_design(strata = stype, weights = pw) dstrata <- dstrata %>%   mutate(api_diff = api00 - api99) dstrata %>%    summarise(api_diff = survey_mean(api_diff, vartype = \"ci\")) #> # A tibble: 1 × 3 #>   api_diff api_diff_low api_diff_upp #>      <dbl>        <dbl>        <dbl> #> 1     32.9         28.8         37.0 dstrata %>%    group_by(stype) %>%   summarise(api_diff = survey_mean(api_diff, vartype = \"ci\")) #> # A tibble: 3 × 4 #>   stype api_diff api_diff_low api_diff_upp #>   <fct>    <dbl>        <dbl>        <dbl> #> 1 E        38.6         33.1          44.0 #> 2 H         8.46         1.74         15.2 #> 3 M        26.4         20.4          32.4 my_model <- survey::svyglm(api99 ~ stype, dstrata) summary(my_model) #>  #> Call: #> svyglm(formula = api99 ~ stype, design = dstrata) #>  #> Survey design: #> Called via srvyr #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)   635.87      13.34  47.669   <2e-16 *** #> stypeH        -18.51      20.68  -0.895    0.372     #> stypeM        -25.67      21.42  -1.198    0.232     #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for gaussian family taken to be 16409.56) #>  #> Number of Fisher Scoring iterations: 2"},{"path":"http://gdfe.co/srvyr/index.html","id":"learning-more","dir":"","previous_headings":"","what":"Learning more","title":"dplyr-Like Syntax for Summary Statistics of Survey Data","text":"free resources put together community srvyr: srvyr’s included vignette “srvyr vs survey” rest pkgdown website Stephanie Zimmer, Rebecca Powell Isabella Velásquez’s book Exploring Complex Survey Data Analysis Using R (releasing November 2024). See also 2021 AAPOR Workshop “Tidy Survey Analysis R using srvyr Package” “Epidemiologist R Handbook”, Neale Batra et al. chapter survey analysis srvyr survey package examples Kieran Healy’s book “Data Visualization: Practical Introduction” section using srvyr visualize ESS. IPUMS PMA team’s blog series showing examples using PMA COVID survey panel weights “Open Case Studies: Vaping Behaviors American Youth” Carrie Wright, Michael Ontiveros, Leah Jager, Margaret Taub, Stephanie Hicks detailed case study includes using srvyr analyze National Youth Tobacco Survey. “plot Likert scales weighted survey dplyr friendly way” Francisco Suárez Salas tidycensus package vignette “Working Census microdata” includes information using weights ACS retrieved census API. “Joy Calculating Direct Standard Error PUMS Estimates” GitHub user @ldaly Thomas Lumley’s book “Complex Surveys: guide analysis using R” Chris Skinner. Jon Wakefield. “Introduction Design Analysis Complex Survey Data.” Statist. Sci. 32 (2) 165 - 175, May 2017. 10.1214/17-STS614 Sharon Lohr’s textbook “Sampling: Design Analysis”. Second Third Editions “Survey weighting mess” opening Andrew Gelman’s “Struggles Survey Weighting Regression Modeling” Anthony Damico’s website “Analyze Survey Data Free” weight specifications wide variety public use survey datasets. dplyr’s included package vignettes “Column-wise operations” & “Programming dplyr” Em português: “Análise de Dados Amostrais Complexos” Djalma Pessoa Pedro Nascimento Silva En español: “Usando R para jugar con los microdatos del INEGI” Claudio Daniel Pacheco Castro Tiếng Việt: “Dịch tễ học ứng dụng và y tế công cộng với R” På norsk: Data med vekter R Øyvind Bugge Solheim (free) graphical interface allowing exploratory data analysis survey data without writing code: iNZight (survey data instructions) “serosurvey: Serological Survey Analysis Prevalence Estimation Misclassification” Andree Valle Campos Several packages CRAN depend srvyr, can see looking reverse Imports/Suggestions CRAN. Still need help? think best way get help form specific question ask place like posit’s community website (known ’s friendly community) stackoverflow.com (maybe known quite friendly, probably people). think ’ve found bug srvyr’s code, please file issue GitHub, note ’m great resource helping specific issue, limited capacity also consider expert statistical methods behind survey analysis. something add? resources mostly found via vanity searches twitter & github. know anything missed, written something , please let know GitHub issue!","code":""},{"path":"http://gdfe.co/srvyr/index.html","id":"what-people-are-saying-about-srvyr","dir":"","previous_headings":"","what":"What people are saying about srvyr","title":"dplyr-Like Syntax for Summary Statistics of Survey Data","text":"minimal changes #r #dplyr script incorporate survey weights, thanks amazing #srvyr #survey packages. Thanks @gregfreedman & @tslumley. Integrates soooo nicely tidyverse –Brian Guay (@BrianMGuay Jun 16, 2021) Spending afternoon using srvyr tidy analysis weighted survey data #rstats ’s elegant. Vignette : https://CRAN.R-project.org/package=srvyr/vignettes/srvyr-vs-survey.html –Chris Skovron (@cskovron Nov 20, 2018) Yay! –Thomas Lumley, Biased Inefficient blog","code":""},{"path":"http://gdfe.co/srvyr/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"dplyr-Like Syntax for Summary Statistics of Survey Data","text":"appreciate bug reports, suggestions pull requests! started way learn R package development, still learning, ’ll bear . Please review Contributor Code Conduct, participants required abide terms. ’re unfamiliar contributing R package, recommend guides provided Rstudio’s tidyverse team, Jim Hester’s blog post Hadley Wickham’s R packages book.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_srvyr_result_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a srvyr results data.frame which is automatically unpacked by srvyr — as_srvyr_result_df","title":"Create a srvyr results data.frame which is automatically unpacked by srvyr — as_srvyr_result_df","text":"srvyr uses data.frame columns wrapped function know automatically unpack results user. developing extensions (see vignette extending-srvyr), use function wrap result summarize knows unpack .","code":""},{"path":"http://gdfe.co/srvyr/reference/as_srvyr_result_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a srvyr results data.frame which is automatically unpacked by srvyr — as_srvyr_result_df","text":"","code":"as_srvyr_result_df(x)"},{"path":"http://gdfe.co/srvyr/reference/as_srvyr_result_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a srvyr results data.frame which is automatically unpacked by srvyr — as_srvyr_result_df","text":"x data.frame","code":""},{"path":"http://gdfe.co/srvyr/reference/as_srvyr_result_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a srvyr results data.frame which is automatically unpacked by srvyr — as_srvyr_result_df","text":"object srvyr_result_df added","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tbl_svy from a data.frame — as_survey","title":"Create a tbl_svy from a data.frame — as_survey","text":"as_survey can used create tbl_svy using design information (as_survey_design), replicate weights (as_survey_rep), two phase design (as_survey_twophase), object created survey package.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tbl_svy from a data.frame — as_survey","text":"","code":"as_survey(.data, ...)  # S3 method for class 'tbl_svy' as_survey(.data, ...)  # S3 method for class 'data.frame' as_survey(.data, ...)  # S3 method for class 'tbl_lazy' as_survey(.data, ...)  # S3 method for class 'survey.design2' as_survey(.data, ...)  # S3 method for class 'svyrep.design' as_survey(.data, ...)  # S3 method for class 'twophase2' as_survey(.data, ...)"},{"path":"http://gdfe.co/srvyr/reference/as_survey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tbl_svy from a data.frame — as_survey","text":".data data.frame object survey package ... arguments, see functions details","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tbl_svy from a data.frame — as_survey","text":"tbl_svy","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tbl_svy from a data.frame — as_survey","text":"See vignette(\"databases\", package = \"dplyr\") information setting databases dplyr.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tbl_svy from a data.frame — as_survey","text":"","code":"# Examples from ?survey::svydesign library(survey) #> Loading required package: grid #> Loading required package: Matrix #> Loading required package: survival #>  #> Attaching package: 'survey' #> The following object is masked from 'package:graphics': #>  #>     dotchart library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data(api)  # stratified sample dstrata <- apistrat %>%   as_survey(strata = stype, weights = pw)  # Examples from ?survey::svrepdesign data(scd) # use BRR replicate weights from Levy and Lemeshow scd$rep1 <- 2 * c(1, 0, 1, 0, 1, 0) scd$rep2 <- 2 * c(1, 0, 0, 1, 0, 1) scd$rep3 <- 2 * c(0, 1, 1, 0, 0, 1) scd$rep4 <- 2 * c(0, 1, 0, 1, 1, 0)  scdrep <- scd %>%   as_survey(type = \"BRR\", repweights = starts_with(\"rep\"),                     combined_weights = FALSE) #> Warning: No sampling weights provided: equal probability assumed  # Examples from ?survey::twophase # two-phase simple random sampling. data(pbc, package=\"survival\")  pbc <- pbc %>%   mutate(randomized = !is.na(trt) & trt > 0,          id = row_number()) d2pbc <- pbc %>%   as_survey(id = list(id, id), subset = randomized)  # dplyr 0.7 introduced new style of NSE called quosures # See `vignette(\"programming\", package = \"dplyr\")` for details st <- quo(stype) wt <- quo(pw) dstrata <- apistrat %>%   as_survey(strata = !!st, weights = !!wt)"},{"path":"http://gdfe.co/srvyr/reference/as_survey_design.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tbl_svy survey object using sampling design — as_survey_design","title":"Create a tbl_svy survey object using sampling design — as_survey_design","text":"Create survey object survey design.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_design.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tbl_svy survey object using sampling design — as_survey_design","text":"","code":"as_survey_design(.data, ...)  # S3 method for class 'data.frame' as_survey_design(   .data,   ids = NULL,   probs = NULL,   strata = NULL,   variables = NULL,   fpc = NULL,   nest = FALSE,   check_strata = !nest,   weights = NULL,   pps = FALSE,   variance = c(\"HT\", \"YG\"),   ... )  # S3 method for class 'survey.design2' as_survey_design(.data, ...)  # S3 method for class 'tbl_lazy' as_survey_design(   .data,   ids = NULL,   probs = NULL,   strata = NULL,   variables = NULL,   fpc = NULL,   nest = FALSE,   check_strata = !nest,   weights = NULL,   pps = FALSE,   variance = c(\"HT\", \"YG\"),   ... )"},{"path":"http://gdfe.co/srvyr/reference/as_survey_design.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tbl_svy survey object using sampling design — as_survey_design","text":".data data frame (contains variables specified ) ... ignored ids Variables specifying cluster ids largest level smallest level (leaving argument empty, NULL, 1, 0 indicate clusters). probs Variables specifying cluster sampling probabilities. strata Variables specifying strata. variables Variables specifying variables included survey. Defaults variables .data fpc Variables specifying finite population correct, see svydesign details. nest TRUE, relabel cluster ids enforce nesting within strata. check_strata TRUE, check clusters nested strata. weights Variables specifying weights (inverse probability). pps \"brewer\" use Brewer's approximation PPS sampling without replacement. \"overton\" use Overton's approximation. object class HR use Hartley-Rao approximation. object class ppsmat use Horvitz-Thompson estimator. variance pps without replacement, use variance=\"YG\" Yates-Grundy estimator instead Horvitz-Thompson estimator","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_design.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tbl_svy survey object using sampling design — as_survey_design","text":"object class tbl_svy","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_design.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tbl_svy survey object using sampling design — as_survey_design","text":"provided data.frame, wrapper around svydesign. survey variables must included data.frame . Variables selected using bare column names, convenience functions described select. provided survey.design2 object survey package, turn srvyr object, srvyr functions work ","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_design.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tbl_svy survey object using sampling design — as_survey_design","text":"","code":"# Examples from ?survey::svydesign library(survey) data(api)  # stratified sample dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  # one-stage cluster sample dclus1 <- apiclus1 %>%   as_survey_design(dnum, weights = pw, fpc = fpc)  # two-stage cluster sample: weights computed from population sizes. dclus2 <- apiclus2 %>%   as_survey_design(c(dnum, snum), fpc = c(fpc1, fpc2))  ## multistage sampling has no effect when fpc is not given, so ## these are equivalent. dclus2wr <- apiclus2 %>%   dplyr::mutate(weights = weights(dclus2)) %>%   as_survey_design(c(dnum, snum), weights = weights)  dclus2wr2 <- apiclus2 %>%   dplyr::mutate(weights = weights(dclus2)) %>%   as_survey_design(c(dnum), weights = weights)  ## syntax for stratified cluster sample ## (though the data weren't really sampled this way) apistrat %>% as_survey_design(dnum, strata = stype, weights = pw,                            nest = TRUE) #> Stratified 1 - level Cluster Sampling design (with replacement) #> With (162) clusters. #> Called via srvyr #> Sampling variables: #>   - ids: dnum  #>   - strata: stype  #>   - weights: pw  #> Data variables:  #>   - cds (chr), stype (fct), name (chr), sname (chr), snum (dbl), dname (chr), #>     dnum (int), cname (chr), cnum (int), flag (int), pcttest (int), api00 #>     (int), api99 (int), target (int), growth (int), sch.wide (fct), comp.imp #>     (fct), both (fct), awards (fct), meals (int), ell (int), yr.rnd (fct), #>     mobility (int), acs.k3 (int), acs.46 (int), acs.core (int), pct.resp (int), #>     not.hsg (int), hsg (int), some.col (int), col.grad (int), grad.sch (int), #>     avg.ed (dbl), full (int), emer (int), enroll (int), api.stu (int), pw #>     (dbl), fpc (dbl)  ## PPS sampling without replacement data(election) dpps <- election_pps %>%   as_survey_design(fpc = p, pps = \"brewer\")  # dplyr 0.7 introduced new style of NSE called quosures # See `vignette(\"programming\", package = \"dplyr\")` for details st <- quo(stype) wt <- quo(pw) dstrata <- apistrat %>%   as_survey_design(strata = !!st, weights = !!wt)"},{"path":"http://gdfe.co/srvyr/reference/as_survey_rep.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tbl_svy survey object using replicate weights — as_survey_rep","title":"Create a tbl_svy survey object using replicate weights — as_survey_rep","text":"Create survey object replicate weights.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_rep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tbl_svy survey object using replicate weights — as_survey_rep","text":"","code":"as_survey_rep(.data, ...)  # S3 method for class 'data.frame' as_survey_rep(   .data,   variables = NULL,   repweights = NULL,   weights = NULL,   type = c(\"BRR\", \"Fay\", \"JK1\", \"JKn\", \"bootstrap\", \"successive-difference\", \"ACS\",     \"other\"),   combined_weights = TRUE,   rho = NULL,   bootstrap_average = NULL,   scale = NULL,   rscales = NULL,   fpc = NULL,   fpctype = c(\"fraction\", \"correction\"),   mse = getOption(\"survey.replicates.mse\"),   degf = NULL,   ... )  # S3 method for class 'tbl_lazy' as_survey_rep(   .data,   variables = NULL,   repweights = NULL,   weights = NULL,   type = c(\"BRR\", \"Fay\", \"JK1\", \"JKn\", \"bootstrap\", \"successive-difference\", \"ACS\",     \"other\"),   combined_weights = TRUE,   rho = NULL,   bootstrap_average = NULL,   scale = NULL,   rscales = NULL,   fpc = NULL,   fpctype = c(\"fraction\", \"correction\"),   mse = getOption(\"survey.replicates.mse\"),   degf = NULL,   ... )  # S3 method for class 'svyrep.design' as_survey_rep(.data, ...)  # S3 method for class 'survey.design2' as_survey_rep(   .data,   type = c(\"auto\", \"JK1\", \"JKn\", \"BRR\", \"bootstrap\", \"subbootstrap\", \"mrbbootstrap\",     \"Fay\"),   rho = 0,   fpc = NULL,   fpctype = NULL,   ...,   compress = TRUE,   mse = getOption(\"survey.replicates.mse\") )  # S3 method for class 'tbl_svy' as_survey_rep(   .data,   type = c(\"auto\", \"JK1\", \"JKn\", \"BRR\", \"bootstrap\", \"subbootstrap\", \"mrbbootstrap\",     \"Fay\"),   rho = 0,   fpc = NULL,   fpctype = NULL,   ...,   compress = TRUE,   mse = getOption(\"survey.replicates.mse\") )"},{"path":"http://gdfe.co/srvyr/reference/as_survey_rep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tbl_svy survey object using replicate weights — as_survey_rep","text":".data data frame (contains variables specified ) ... ignored variables Variables include design (default ) repweights Variables specifying replication weight variables weights Variables specifying sampling weights type Type replication weights combined_weights TRUE repweights already include sampling weights. usually case. rho Shrinkage factor weights Fay's method bootstrap_average type = \"bootstrap\", bootstrap weights averaged, gives number iterations averaged . scale, rscales Scaling constant variance, see svrepdesign information. fpc Variables specifying finite population correction, see svrepdesign details. fpctype Finite population correction information mse TRUE, compute variances based sum squares around point estimate, rather mean replicates degf Design degrees freedom: single number, NULL, case value computed automatically, can slow large data sets. See svrepdesign details. compress TRUE, store replicate weights compressed form (converting design)","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_rep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tbl_svy survey object using replicate weights — as_survey_rep","text":"object class tbl_svy","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_rep.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tbl_svy survey object using replicate weights — as_survey_rep","text":"provided data.frame, wrapper around svrepdesign. survey variables must included data.frame . Variables selected using bare column names, convenience functions described select. provided svyrep.design object survey package, turn srvyr object, srvyr functions work provided survey design (survey.design2 tbl_svy), wrapper around .svrepdesign, convert survey design replicate weights.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_rep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tbl_svy survey object using replicate weights — as_survey_rep","text":"","code":"# Examples from ?survey::svrepdesign() library(survey) library(dplyr) data(scd) # use BRR replicate weights from Levy and Lemeshow scd <- scd %>%   mutate(rep1 = 2 * c(1, 0, 1, 0, 1, 0),          rep2 = 2 * c(1, 0, 0, 1, 0, 1),          rep3 = 2 * c(0, 1, 1, 0, 0, 1),          rep4 = 2 * c(0, 1, 0, 1, 1, 0))  scdrep <- scd %>%   as_survey_rep(type = \"BRR\", repweights = starts_with(\"rep\"),                 combined_weights = FALSE) #> Warning: No sampling weights provided: equal probability assumed  # dplyr 0.7 introduced new style of NSE called quosures # See `vignette(\"programming\", package = \"dplyr\")` for details repwts <- quo(starts_with(\"rep\")) scdrep <- scd %>%   as_survey_rep(type = \"BRR\", repweights = !!repwts,                 combined_weights = FALSE) #> Warning: No sampling weights provided: equal probability assumed"},{"path":"http://gdfe.co/srvyr/reference/as_survey_twophase.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a tbl_svy survey object using two phase design — as_survey_twophase","title":"Create a tbl_svy survey object using two phase design — as_survey_twophase","text":"Create survey object specifying survey's two phase design. wrapper around twophase. survey variables must included data.frame . Variables selected using bare column names, convenience functions described select.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_twophase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tbl_svy survey object using two phase design — as_survey_twophase","text":"","code":"as_survey_twophase(.data, ...)  # S3 method for class 'data.frame' as_survey_twophase(   .data,   id,   strata = NULL,   probs = NULL,   weights = NULL,   fpc = NULL,   subset,   method = c(\"full\", \"approx\", \"simple\"),   ... )  # S3 method for class 'twophase2' as_survey_twophase(.data, ...)"},{"path":"http://gdfe.co/srvyr/reference/as_survey_twophase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tbl_svy survey object using two phase design — as_survey_twophase","text":".data data frame (contains variables specified ) ... ignored id list two sets variable names sampling unit identifiers strata list two sets variable names (NULLs) stratum identifiers probs list two sets variable names (NULLs) sampling probabilities weights method = \"approx\", list two sets variable names (NULLs) sampling weights fpc list two sets variables (NULLs finite population corrections subset bare name variable specifies observations selected phase 2 method \"full\" requires (much) memory, gives unbiased variance estimates general multistage designs phases. \"simple\" \"approx\" use less memory, correct designs simple random sampling phase one stratified randoms sampling phase two. See twophase details.","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_twophase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tbl_svy survey object using two phase design — as_survey_twophase","text":"object class tbl_svy","code":""},{"path":"http://gdfe.co/srvyr/reference/as_survey_twophase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tbl_svy survey object using two phase design — as_survey_twophase","text":"","code":"# Examples from ?survey::twophase # two-phase simple random sampling. data(pbc, package=\"survival\") library(dplyr)  pbc <- pbc %>%   mutate(randomized = !is.na(trt) & trt > 0,          id = row_number()) d2pbc <- pbc %>%   as_survey_twophase(id = list(id, id), subset = randomized)  d2pbc %>% summarize(mean = survey_mean(bili)) #> # A tibble: 1 × 2 #>    mean mean_se #>   <dbl>   <dbl> #> 1  3.26   0.256  # two-stage sampling as two-phase library(survey) data(mu284)  mu284_1 <- mu284 %>%   dplyr::slice(c(1:15, rep(1:5, n2[1:5] - 3))) %>%   mutate(id = row_number(),          sub = rep(c(TRUE, FALSE), c(15, 34-15)))  dmu284 <- mu284 %>%   as_survey_design(ids = c(id1, id2), fpc = c(n1, n2)) # first phase cluster sample, second phase stratified within cluster d2mu284 <- mu284_1 %>%   as_survey_twophase(id = list(id1, id), strata = list(NULL, id1),                   fpc = list(n1, NULL), subset = sub) dmu284 %>%   summarize(total = survey_total(y1),             mean = survey_mean(y1)) #> # A tibble: 1 × 4 #>   total total_se  mean mean_se #>   <dbl>    <dbl> <dbl>   <dbl> #> 1 15080    2274.  44.4    2.27 d2mu284 %>%   summarize(total = survey_total(y1),             mean = survey_mean(y1)) #> # A tibble: 1 × 4 #>   total total_se  mean mean_se #>   <dbl>    <dbl> <dbl>   <dbl> #> 1 15080    2274.  44.4    2.27  # dplyr 0.7 introduced new style of NSE called quosures # See `vignette(\"programming\", package = \"dplyr\")` for details ids <- quo(list(id, id)) d2pbc <- pbc %>%   as_survey_twophase(id = !!ids, subset = \"randomized\")"},{"path":"http://gdfe.co/srvyr/reference/as_tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce survey variables to a data frame (tibble) — as_tibble","title":"Coerce survey variables to a data frame (tibble) — as_tibble","text":"Coerce survey variables data frame (tibble)","code":""},{"path":"http://gdfe.co/srvyr/reference/as_tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce survey variables to a data frame (tibble) — as_tibble","text":"x tbl_svy object","code":""},{"path":"http://gdfe.co/srvyr/reference/cascade.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise multiple values into cascading groups — cascade","title":"Summarise multiple values into cascading groups — cascade","text":"cascade similar summarise, calculates summary statistics total group addition group. groupings chosen \"unpeeling\" end groupings, also expanding interactions terms (eg interactions combinations subsets variables well variable ).","code":""},{"path":"http://gdfe.co/srvyr/reference/cascade.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise multiple values into cascading groups — cascade","text":"","code":"cascade(.data, ..., .fill = NA, .fill_level_top = FALSE, .groupings = NULL)"},{"path":"http://gdfe.co/srvyr/reference/cascade.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise multiple values into cascading groups — cascade","text":".data, tbl tbl_svy object ... Name-value pairs summary functions .fill Value fill group summaries .fill_level_top filling factor variables, whether put value `.fill` first position (defaults FALSE, placing bottom). .groupings (Experimental) list lists quosures manually specify groupings use, rather default.","code":""},{"path":"http://gdfe.co/srvyr/reference/cascade.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise multiple values into cascading groups — cascade","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  # Calculates the means by stype and also for the whole # sample dstrata %>%   group_by(stype) %>%   cascade(api99_mn = survey_mean(api99),             api00_mn = survey_mean(api00),             api_diff = survey_mean(api00 - api99)) #> # A tibble: 4 × 7 #>   stype api99_mn api99_mn_se api00_mn api00_mn_se api_diff api_diff_se #>   <fct>    <dbl>       <dbl>    <dbl>       <dbl>    <dbl>       <dbl> #> 1 E         636.        13.3     674.       12.5     38.6         2.76 #> 2 H         617.        15.8     626.       15.5      8.46        3.41 #> 3 M         610.        16.8     637.       16.6     26.4         3.05 #> 4 NA        629.        10.1     662.        9.54    32.9         2.08  # Calculates the proportions by the interaction of stype & awards # as well as by each of those variable's groups alone, and finally # the total as well dstrata %>%   group_by(interact(stype, awards)) %>%   cascade(prop = survey_mean()) #> # A tibble: 12 × 4 #>    stype awards   prop prop_se #>    <fct> <fct>   <dbl>   <dbl> #>  1 E     No     0.193  0.0318  #>  2 E     Yes    0.521  0.0318  #>  3 E     NA     0.714  0       #>  4 H     No     0.0829 0.00812 #>  5 H     Yes    0.0390 0.00812 #>  6 H     NA     0.122  0       #>  7 M     No     0.0855 0.0117  #>  8 M     Yes    0.0789 0.0117  #>  9 M     NA     0.164  0       #> 10 NA    No     0.361  0.0349  #> 11 NA    Yes    0.639  0.0349  #> 12 NA    NA     1      0        # Can also specify the .groupings manually, though this interface # is a little ugly, as it requires passing a list of quosures or # symbols you've created, rather than the usual syntax dstrata %>%   cascade(     prop = survey_mean(),     .groupings = list(rlang::quos(stype, awards), rlang::quos(NULL))   ) #> # A tibble: 7 × 4 #> # Groups:   stype [4] #>   stype awards  prop prop_se #>   <fct> <fct>  <dbl>   <dbl> #> 1 E     No      0.27  0.0446 #> 2 E     Yes     0.73  0.0446 #> 3 H     No      0.68  0.0666 #> 4 H     Yes     0.32  0.0666 #> 5 M     No      0.52  0.0714 #> 6 M     Yes     0.48  0.0714 #> 7 NA    NA      1     0"},{"path":"http://gdfe.co/srvyr/reference/collect.html","id":null,"dir":"Reference","previous_headings":"","what":"Force computation of a database query — collect","title":"Force computation of a database query — collect","text":"collect retrieves data database query (run tbl_svy object adjusts weights accordingly). Use collect want run function survey package srvyr db backed object. compute stores results remote temporary table.","code":""},{"path":"http://gdfe.co/srvyr/reference/cur_svy.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the survey data for the current context — cur_svy","title":"Get the survey data for the current context — cur_svy","text":"helper allow srvyr's syntactic style. particular, tells functions inside summarize call survey use (current group cur_svy() complete survey cur_svy_full(). general, users worry getting (setting) current context's survey, unless trying extend srvyr. See vignette(\"extending-srvyr\") details. current_svy() deprecated, returns value cur_svy().","code":""},{"path":"http://gdfe.co/srvyr/reference/cur_svy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the survey data for the current context — cur_svy","text":"","code":"cur_svy()  cur_svy_full()  current_svy()"},{"path":"http://gdfe.co/srvyr/reference/cur_svy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the survey data for the current context — cur_svy","text":"tbl_svy (error called survey context)","code":""},{"path":"http://gdfe.co/srvyr/reference/cur_svy_wts.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the full-sample weights for the current context — cur_svy_wts","title":"Get the full-sample weights for the current context — cur_svy_wts","text":"helper allow srvyr's syntactic style. function allows quick access full-sample weights current group, using cur_svy_wts(), See vignette(\"extending-srvyr\") details.","code":""},{"path":"http://gdfe.co/srvyr/reference/cur_svy_wts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the full-sample weights for the current context — cur_svy_wts","text":"","code":"cur_svy_wts()"},{"path":"http://gdfe.co/srvyr/reference/cur_svy_wts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the full-sample weights for the current context — cur_svy_wts","text":"numeric vector containing full-sample weights","code":""},{"path":"http://gdfe.co/srvyr/reference/cur_svy_wts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the full-sample weights for the current context — cur_svy_wts","text":"","code":"data(api, package = 'survey')  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarize(sum_of_weights = sum(cur_svy_wts()),             kish_deff = var(cur_svy_wts())/(mean(cur_svy_wts())^2)) #> # A tibble: 1 × 2 #>   sum_of_weights kish_deff #>            <dbl>     <dbl> #> 1          6194.     0.187"},{"path":"http://gdfe.co/srvyr/reference/dplyr_filter_joins.html","id":null,"dir":"Reference","previous_headings":"","what":"Filtering joins from dplyr — dplyr_filter_joins","title":"Filtering joins from dplyr — dplyr_filter_joins","text":"data manipulation functions designed work tbl_svy object another data frame tbl_svy object.","code":""},{"path":"http://gdfe.co/srvyr/reference/dplyr_filter_joins.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filtering joins from dplyr — dplyr_filter_joins","text":"semi_join anti_join filter certain observations tbl_svy depending presence absence matches another table. See filter-joins details. Mutating joins (full_join, left_join, etc.) implemented tbl_svy objects. data manipulations may require modifications survey variable specifications done automatically. Instead, use dplyr perform data still stored data.frames.","code":""},{"path":"http://gdfe.co/srvyr/reference/dplyr_single.html","id":null,"dir":"Reference","previous_headings":"","what":"Single table verbs from dplyr and tidyr — group_trim","title":"Single table verbs from dplyr and tidyr — group_trim","text":"data manipulation functions designed work tbl_svy objects.","code":""},{"path":"http://gdfe.co/srvyr/reference/dplyr_single.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Single table verbs from dplyr and tidyr — group_trim","text":"mutate transmute can add modify variables. See mutate details. select, rename, rename_with keep rename variables. See select details. pull extracts variable vector (whereas select returns tbl_svy). See pull details. filter keeps certain observations. See filter details. #' drop_na drops observations containing missing values. See drop_na details. arrange implemented tbl_svy objects. two table verbs bind_rows, bind_cols joins (full_join, left_join, etc.). data manipulations may require modifications survey variable specifications done automatically. Instead, use dplyr perform data still stored data.frames.","code":""},{"path":"http://gdfe.co/srvyr/reference/get_var_est.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the variance estimates for a survey estimate — get_var_est","title":"Get the variance estimates for a survey estimate — get_var_est","text":"helper allow srvyr's syntactic style. general, users worry getting survey variance estimates directly unless trying extend srvyr. function helps convert result survey function data.frame estimate measures variance around way summarize expects. See vignette(\"extending-srvyr\") details.","code":""},{"path":"http://gdfe.co/srvyr/reference/get_var_est.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the variance estimates for a survey estimate — get_var_est","text":"","code":"get_var_est(   stat,   vartype,   level = 0.95,   df = Inf,   pre_calc_ci = FALSE,   deff = FALSE )"},{"path":"http://gdfe.co/srvyr/reference/get_var_est.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the variance estimates for a survey estimate — get_var_est","text":"stat survey statistic object, usually result function survey package svyby. vartype vector indicating variance estimates calculate (options se standard error, ci confidence interval, var variance cv coefficient variation). Multiples allowed. level One levels calculate confidence interval. df Degrees freedom, many survey functions default Inf, srvyr functions generally default result calling degf survey object. pre_calc_ci Whether confidence interval pre-calculated (svyciprop) deff Whether return design effect (calculated using survey::deff)","code":""},{"path":"http://gdfe.co/srvyr/reference/get_var_est.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the variance estimates for a survey estimate — get_var_est","text":"tbl_svy variables modified","code":""},{"path":"http://gdfe.co/srvyr/reference/groups.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/set the grouping variables for tbl. — groups","title":"Get/set the grouping variables for tbl. — groups","text":"functions perform non-standard evaluation, useful programming tbl objects. ungroup convenient inline way removing existing grouping.","code":""},{"path":"http://gdfe.co/srvyr/reference/groups.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/set the grouping variables for tbl. — groups","text":"x data tbl_df tbl_svy object.","code":""},{"path":[]},{"path":"http://gdfe.co/srvyr/reference/group_by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group a (survey) dataset by one or more variables. — group_by","title":"Group a (survey) dataset by one or more variables. — group_by","text":"data operations useful done groups defined variables dataset. group_by function takes existing table (svy_table) converts grouped version, operations performed \"group\".","code":""},{"path":"http://gdfe.co/srvyr/reference/group_by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group a (survey) dataset by one or more variables. — group_by","text":".data tbl ... variables group . tbls accept variable names, also accept functions variables. Duplicated groups silently dropped. add default, add = FALSE, group_by override existing groups. instead add existing groups, use add = TRUE .dots Used work around non-standard evaluation. See vignette(\"nse\", package = \"dplyr\") details.","code":""},{"path":"http://gdfe.co/srvyr/reference/group_by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group a (survey) dataset by one or more variables. — group_by","text":"See group_by information grouping regular data tables. tbl_svy objects, group_by sets object operations similar allowed svyby.","code":""},{"path":[]},{"path":"http://gdfe.co/srvyr/reference/group_by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group a (survey) dataset by one or more variables. — group_by","text":"","code":"# Examples of svy_tbl group_by library(survey) data(api) dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw) %>%   group_by(stype)    dstrata %>%     summarise(api_diff = survey_mean(api00 - api99)) #> # A tibble: 3 × 3 #>   stype api_diff api_diff_se #>   <fct>    <dbl>       <dbl> #> 1 E        38.6         2.76 #> 2 H         8.46        3.41 #> 3 M        26.4         3.05"},{"path":"http://gdfe.co/srvyr/reference/group_map_dfr.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function to each group — group_map_dfr","title":"Apply a function to each group — group_map_dfr","text":"group_map(), group_walk group_map_dfr purrr-style functions can used iterate grouped survey objects (note group_map_dfr replaces dplyr::group_modify changing data tbl_svy regular tibble).","code":""},{"path":"http://gdfe.co/srvyr/reference/group_map_dfr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function to each group — group_map_dfr","text":"","code":"group_map_dfr(.data, .f, ..., .keep = FALSE)  # S3 method for class 'tbl_svy' group_map(.data, .f, ..., .keep = FALSE)  group_map_dfr(.data, .f, ..., .keep = FALSE)"},{"path":"http://gdfe.co/srvyr/reference/group_map_dfr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function to each group — group_map_dfr","text":".data tbl_svy object .f function purrr-style formula apply group ... arguments passed .f .keep Whether grouping variables kept passed .f","code":""},{"path":"http://gdfe.co/srvyr/reference/group_map_dfr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function to each group — group_map_dfr","text":"group_map list, group_map_dfr `tbl_df`,   group_walk invisibly original tbl_svy.","code":""},{"path":"http://gdfe.co/srvyr/reference/group_map_dfr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply a function to each group — group_map_dfr","text":"","code":"data(api, package = \"survey\") dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  results <- dstrata %>%   group_by(both) %>%   group_map(~survey::svyglm(api00~api99 + stype, .))  # group_map_dfr calls `bind_rows` on the list returned and includes # grouping variables. This is most useful with a package like `broom` # but could also be used with survey package functions. result_coef <- dstrata %>%   group_by(both) %>%   group_map_dfr(     ~data.frame(       api99_coef = coef(survey::svyglm(api00~api99 + stype, .))[[\"api99\"]]     )   )"},{"path":"http://gdfe.co/srvyr/reference/interact.html","id":null,"dir":"Reference","previous_headings":"","what":"Create interaction terms to group by when summarizing — interact","title":"Create interaction terms to group by when summarizing — interact","text":"Allows multiple grouping multiple variables single variable, allows calculating proportions sum 100 single grouping variable survey_mean.","code":""},{"path":"http://gdfe.co/srvyr/reference/interact.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create interaction terms to group by when summarizing — interact","text":"","code":"interact(...)"},{"path":"http://gdfe.co/srvyr/reference/interact.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create interaction terms to group by when summarizing — interact","text":"... variables group . types tbls accept variable names, also accept functions variables (though database-backed tbls allow creating variables).","code":""},{"path":"http://gdfe.co/srvyr/reference/interact.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create interaction terms to group by when summarizing — interact","text":"vector type srvyr_interaction, generally expected automatically split apart.","code":""},{"path":"http://gdfe.co/srvyr/reference/interact.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create interaction terms to group by when summarizing — interact","text":"Behind scenes, function creates special column type split back component columns automatically summarize.","code":""},{"path":"http://gdfe.co/srvyr/reference/interact.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create interaction terms to group by when summarizing — interact","text":"","code":"data(api, package = \"survey\")  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  # The sum of the whole prop column is equal to 100% dstrata %>%   group_by(interact(stype, awards)) %>%   summarize(prop = survey_mean()) #> # A tibble: 6 × 4 #>   stype awards   prop prop_se #>   <fct> <fct>   <dbl>   <dbl> #> 1 E     No     0.193  0.0318  #> 2 E     Yes    0.521  0.0318  #> 3 H     No     0.0829 0.00812 #> 4 H     Yes    0.0390 0.00812 #> 5 M     No     0.0855 0.0117  #> 6 M     Yes    0.0789 0.0117   # But if you didn't interact, the sum of each stype's prop is 100% dstrata %>%   group_by(stype, awards) %>%   summarize(prop = survey_mean()) #> # A tibble: 6 × 4 #> # Groups:   stype [3] #>   stype awards  prop prop_se #>   <fct> <fct>  <dbl>   <dbl> #> 1 E     No      0.27  0.0446 #> 2 E     Yes     0.73  0.0446 #> 3 H     No      0.68  0.0666 #> 4 H     Yes     0.32  0.0666 #> 5 M     No      0.52  0.0714 #> 6 M     Yes     0.48  0.0714"},{"path":"http://gdfe.co/srvyr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See %>% details.","code":""},{"path":"http://gdfe.co/srvyr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"http://gdfe.co/srvyr/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr across, c_across, cur_column, cur_data, cur_group, cur_group_id, group_map, group_modify, group_nest, group_split, group_walk, n, nest_by, reframe","code":""},{"path":"http://gdfe.co/srvyr/reference/rlang-tidyeval.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy eval helpers from rlang — rlang-tidyeval","title":"Tidy eval helpers from rlang — rlang-tidyeval","text":"functions used tidy evaluation, introduced rlang dplyr 0.7. See programming vignette dplyr <http://rlang.tidyverse.org/articles/tidy-evaluation.html> details.","code":""},{"path":"http://gdfe.co/srvyr/reference/set_survey_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the variables for the current survey variable — set_survey_vars","title":"Set the variables for the current survey variable — set_survey_vars","text":"helper allow srvyr's syntactic style. general, users worry setting variables survey object unless trying extend srvyr. function helps convert vector variable correct part survey object's structure functions can refer using survey package's formula notation. See vignette(\"extending-srvyr\") details.","code":""},{"path":"http://gdfe.co/srvyr/reference/set_survey_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the variables for the current survey variable — set_survey_vars","text":"","code":"set_survey_vars(.svy, x, name = \"__SRVYR_TEMP_VAR__\", add = FALSE)"},{"path":"http://gdfe.co/srvyr/reference/set_survey_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the variables for the current survey variable — set_survey_vars","text":".svy survey object x vector included variables portion survey object name name variable added. Defaults `__SRVYR_TEMP_VAR__` formatted weirdly avoid name collisions. add FALSE, default, overwrite current variables. TRUE, add variable instead.","code":""},{"path":"http://gdfe.co/srvyr/reference/set_survey_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the variables for the current survey variable — set_survey_vars","text":"tbl_svy variables modified","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr-se-deprecated.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated SE versions of main srvyr verbs — srvyr-se-deprecated","title":"Deprecated SE versions of main srvyr verbs — srvyr-se-deprecated","text":"srvyr updated standard evaluation semantics match dplyr 0.7, underscore functions longer required (still supported backward compatibility reasons). See se-deprecated dplyr vignette programming (vignette(\"programming\", package = \"dplyr\")) details.","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr-se-deprecated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated SE versions of main srvyr verbs — srvyr-se-deprecated","text":"","code":"as_survey_(.data, ...)  as_survey_design_(   .data,   ids = NULL,   probs = NULL,   strata = NULL,   variables = NULL,   fpc = NULL,   nest = FALSE,   check_strata = !nest,   weights = NULL,   pps = FALSE,   variance = c(\"HT\", \"YG\") )  as_survey_rep_(   .data,   variables = NULL,   repweights = NULL,   weights = NULL,   type = c(\"BRR\", \"Fay\", \"JK1\", \"JKn\", \"bootstrap\", \"successive-difference\", \"ACS\",     \"other\"),   combined_weights = TRUE,   rho = NULL,   bootstrap_average = NULL,   scale = NULL,   rscales = NULL,   fpc = NULL,   fpctype = c(\"fraction\", \"correction\"),   mse = getOption(\"survey.replicates.mse\") )  as_survey_twophase_(   .data,   id,   strata = NULL,   probs = NULL,   weights = NULL,   fpc = NULL,   subset,   method = c(\"full\", \"approx\", \"simple\") )  cascade_(.data, ..., .dots, .fill = NA)"},{"path":"http://gdfe.co/srvyr/reference/srvyr-se-deprecated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated SE versions of main srvyr verbs — srvyr-se-deprecated","text":".data data.frame object survey package ... arguments, see functions details ids Variables specifying cluster ids largest level smallest level (leaving argument empty, NULL, 1, 0 indicate clusters). probs Variables specifying cluster sampling probabilities. strata Variables specifying strata. variables Variables specifying variables included survey. Defaults variables .data fpc Variables specifying finite population correct, see svydesign details. nest TRUE, relabel cluster ids enforce nesting within strata. check_strata TRUE, check clusters nested strata. weights Variables specifying weights (inverse probability). pps \"brewer\" use Brewer's approximation PPS sampling without replacement. \"overton\" use Overton's approximation. object class HR use Hartley-Rao approximation. object class ppsmat use Horvitz-Thompson estimator. variance pps without replacement, use variance=\"YG\" Yates-Grundy estimator instead Horvitz-Thompson estimator repweights Variables specifying replication weight variables type Type replication weights combined_weights TRUE repweights already include sampling weights. usually case. rho Shrinkage factor weights Fay's method bootstrap_average type = \"bootstrap\", bootstrap weights averaged, gives number iterations averaged . scale, rscales Scaling constant variance, see svrepdesign information. fpctype Finite population correction information mse TRUE, compute variances based sum squares around point estimate, rather mean replicates id list two sets variable names sampling unit identifiers subset bare name variable specifies observations selected phase 2 method \"full\" requires (much) memory, gives unbiased variance estimates general multistage designs phases. \"simple\" \"approx\" use less memory, correct designs simple random sampling phase one stratified randoms sampling phase two. See twophase details. .dots Used work around non-standard evaluation. See vignette(\"nse\", package = \"dplyr\") details. .fill Value fill group summaries","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr.html","id":null,"dir":"Reference","previous_headings":"","what":"srvyr: A package for 'dplyr'-Like Syntax for Summary Statistics of Survey Data. — srvyr","title":"srvyr: A package for 'dplyr'-Like Syntax for Summary Statistics of Survey Data. — srvyr","text":"srvyr package provides new way calculating summary statistics survey data, based dplyr package. three stages using srvyr functions, creating survey object, manipulating data, calculating survey statistics.","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr.html","id":"functions-to-create-a-survey-object","dir":"Reference","previous_headings":"","what":"Functions to create a survey object","title":"srvyr: A package for 'dplyr'-Like Syntax for Summary Statistics of Survey Data. — srvyr","text":"as_survey_design, as_survey_rep, as_survey_twophase used create surveys based data.frame design variables, replicate weights two phase design respectively. based function survey package (svydesign, svrepdesign, twophase), easy modify code uses survey package works srvyr package. See vignette(\"srvyr_vs_survey\") details. function as_survey choose three functions based arguments given save typing.","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr.html","id":"functions-to-manipulate-data-in-a-survey-object","dir":"Reference","previous_headings":"","what":"Functions to manipulate data in a survey object","title":"srvyr: A package for 'dplyr'-Like Syntax for Summary Statistics of Survey Data. — srvyr","text":"created survey object, can manipulate data using dplyr data.frame. mutate modifies creates variable, select rename select rename variables, filter keeps certain observations. Note arrange two table verbs bind_rows, bind_cols, joins usable survey objects might require modifications definition survey. need use functions, convert data.frame survey object.","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr.html","id":"functions-to-summarize-a-survey-object","dir":"Reference","previous_headings":"","what":"Functions to summarize a survey object","title":"srvyr: A package for 'dplyr'-Like Syntax for Summary Statistics of Survey Data. — srvyr","text":"Now data set correctly, can calculate summary statistics. get statistic whole population, use summarise, calculate set groups, use group_by first. can calculate mean, (survey_mean), total (survey_total), quantile (survey_quantile), ratio (survey_ratio). default, srvyr return statistic standard error around data.frame, vartype parameter, can also get confidence interval (\"ci\"), variance (\"var\"), coefficient variation (\"cv\"). Within summarise, can also use unweighted, calculates function without taking consideration survey weighting.","code":""},{"path":[]},{"path":"http://gdfe.co/srvyr/reference/srvyr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"srvyr: A package for 'dplyr'-Like Syntax for Summary Statistics of Survey Data. — srvyr","text":"Maintainer: Greg Freedman Ellis greg.freedman@gmail.com Authors: Ben Schneider [contributor] contributors: Thomas Lumley [contributor] Tomasz Żółtak [contributor] Pavel N. Krivitsky pavel@statnet.org [contributor]","code":""},{"path":"http://gdfe.co/srvyr/reference/srvyr_interaction.html","id":null,"dir":"Reference","previous_headings":"","what":"srvyr interaction column — srvyr_interaction","title":"srvyr interaction column — srvyr_interaction","text":"srvyr_interaction columns help calculate proportions interaction 2 variables. created interact, generally used grouping variables group_by automatically split apart summarise.","code":""},{"path":"http://gdfe.co/srvyr/reference/summarise.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise multiple values to a single value. — summarise","title":"Summarise multiple values to a single value. — summarise","text":"Summarise multiple values single value.","code":""},{"path":"http://gdfe.co/srvyr/reference/summarise.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise multiple values to a single value. — summarise","text":".data tbl tbl_svy object ... Name-value pairs summarizing expressions, see details .groups Defaults \"drop_last\" srvyr meaning last group peeled , groups preserved. options \"drop\", drops groups, \"keep\" keeps \"rowwise\" converts object rowwise object (meaning calculations performed row). .unpack Whether \"unpack\" named data.frame columns. srvyr predates dplyr's support data.frame columns treat way default.","code":""},{"path":"http://gdfe.co/srvyr/reference/summarise.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise multiple values to a single value. — summarise","text":"Summarise tbl_svy objects accepts several specialized functions. functions variable (two, case survey_ratio), data.frame default providing measure standard error. argument vartype can choose one measures uncertainty, se standard error, ci confidence interval, var variance, cv coefficient variation. level specifies level confidence interval. arguments correspond analogous function arguments survey package. available functions srvyr : survey_mean Calculate mean numeric variable proportion falling groups    entire population groups. Based svymean    svyciprop. survey_total Calculate survey total entire population groups.    Based svytotal. survey_prop Calculate proportion entire population groups.    Based svyciprop. survey_ratio Calculate ratio 2 variables entire population groups.    Based svyratio. survey_quantile & survey_median Calculate quantiles entire population groups. Based    svyquantile. unweighted Calculate unweighted estimate regular tbl_df.    Based dplyr's summarise. can use expressions ... summarize also arguments summarizing functions. Though valid syntactically can also allow calculate incorrect results (example multiply mean 100, standard error also multiplied 100, variance ).","code":""},{"path":"http://gdfe.co/srvyr/reference/summarise.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise multiple values to a single value. — summarise","text":"","code":"data(api, package = \"survey\")  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(api99_mn = survey_mean(api99),             api00_mn = survey_mean(api00),             api_diff = survey_mean(api00 - api99)) #> # A tibble: 1 × 6 #>   api99_mn api99_mn_se api00_mn api00_mn_se api_diff api_diff_se #>      <dbl>       <dbl>    <dbl>       <dbl>    <dbl>       <dbl> #> 1     629.        10.1     662.        9.54     32.9        2.08  dstrata_grp <- dstrata %>%   group_by(stype)  dstrata_grp %>%   summarise(api99_mn = survey_mean(api99),             api00_mn = survey_mean(api00),             api_diff = survey_mean(api00 - api99)) #> # A tibble: 3 × 7 #>   stype api99_mn api99_mn_se api00_mn api00_mn_se api_diff api_diff_se #>   <fct>    <dbl>       <dbl>    <dbl>       <dbl>    <dbl>       <dbl> #> 1 E         636.        13.3     674.        12.5    38.6         2.76 #> 2 H         617.        15.8     626.        15.5     8.46        3.41 #> 3 M         610.        16.8     637.        16.6    26.4         3.05  # `dplyr::across` can be used to programmatically summarize multiple columns # See https://dplyr.tidyverse.org/articles/colwise.html for details # A basic example of working on 2 columns at once and then calculating the total # the mean total_vars <- c(\"enroll\", \"api.stu\") dstrata %>%   summarize(across(c(all_of(total_vars)), survey_total)) #> # A tibble: 1 × 4 #>     enroll enroll_se  api.stu api.stu_se #>      <dbl>     <dbl>    <dbl>      <dbl> #> 1 3687178.   117319. 3086009.    101841.  # Expressions are allowed in summarize arguments & inside functions # Here we can calculate binary variable on the fly and also multiply by 100 to # get percentages dstrata %>%   summarize(api99_over_700_pct = 100 * survey_mean(api99 > 700)) #> # A tibble: 1 × 2 #>   api99_over_700_pct api99_over_700_pct_se #>                <dbl>                 <dbl> #> 1               30.6                  3.61  # But be careful, the variance doesn't scale the same way, so this is wrong! dstrata %>%   summarize(api99_over_700_pct = 100 * survey_mean(api99 > 700, vartype = \"var\")) #> # A tibble: 1 × 2 #>   api99_over_700_pct api99_over_700_pct_var #>                <dbl>                  <dbl> #> 1               30.6                  0.130 # Wrong variance!"},{"path":"http://gdfe.co/srvyr/reference/summarise_all.html","id":null,"dir":"Reference","previous_headings":"","what":"Manipulate multiple columns. — summarise_all","title":"Manipulate multiple columns. — summarise_all","text":"See summarize_all details. *_each functions deprecated favor *_all/*_if/*_at functions.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_corr.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate correlation and its variation using survey methods — survey_corr","title":"Calculate correlation and its variation using survey methods — survey_corr","text":"Calculate correlation complex survey data. wrapper around svyvar. survey_corr always called summarise. Note Pearson's correlation.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_corr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate correlation and its variation using survey methods — survey_corr","text":"","code":"survey_corr(   x,   y,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   df = NULL,   ... )"},{"path":"http://gdfe.co/srvyr/reference/survey_corr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate correlation and its variation using survey methods — survey_corr","text":"x variable expression y variable expression na.rm logical value indicate whether missing values dropped vartype NULL report variability. Otherwise one : standard error (\"se\", default), confidence interval (\"ci\"), variance (\"var\") coefficient variation (\"cv\"). level (vartype = \"ci\" ) single number vector numbers indicating confidence level df (vartype = \"ci\" ) numeric value indicating degrees freedom t-distribution. default (NULL) uses degf, Inf usual survey package's default ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_corr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate correlation and its variation using survey methods — survey_corr","text":"","code":"data('api', package = 'survey')  apisrs %>%   as_survey_design(.ids = 1) %>%   summarize(api_corr = survey_corr(x = api00, y = api99)) #> # A tibble: 1 × 2 #>   api_corr api_corr_se #>      <dbl>       <dbl> #> 1    0.975     0.00461  apisrs %>%   as_survey_design(.ids = 1) %>%   group_by(sch.wide) %>%   summarize(     api_emer_corr = survey_corr(x = api00, y = emer, na.rm=TRUE, vartype=\"ci\")   ) #> # A tibble: 2 × 4 #>   sch.wide api_emer_corr api_emer_corr_low api_emer_corr_upp #>   <fct>            <dbl>             <dbl>             <dbl> #> 1 No              -0.403            -0.583            -0.223 #> 2 Yes             -0.398            -0.526            -0.271"},{"path":"http://gdfe.co/srvyr/reference/survey_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate mean/proportion and its variation using survey methods — survey_mean","title":"Calculate mean/proportion and its variation using survey methods — survey_mean","text":"Calculate means proportions complex survey data. survey_mean proportion = FALSE (default) survey_prop proportion = FALSE wrapper around svymean. survey_prop proportion = TRUE (default) survey_mean proportion = TRUE wrapper around svyciprop. survey_mean survey_prop always called summarise.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate mean/proportion and its variation using survey methods — survey_mean","text":"","code":"survey_mean(   x,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   proportion = FALSE,   prop_method = c(\"logit\", \"likelihood\", \"asin\", \"beta\", \"mean\", \"xlogit\"),   deff = FALSE,   df = NULL,   ... )  survey_prop(   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   proportion = TRUE,   prop_method = c(\"logit\", \"likelihood\", \"asin\", \"beta\", \"mean\", \"xlogit\"),   deff = FALSE,   df = NULL,   ... )"},{"path":"http://gdfe.co/srvyr/reference/survey_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate mean/proportion and its variation using survey methods — survey_mean","text":"x variable expression, empty na.rm logical value indicate whether missing values dropped. See section \"Missing Values\" later help page. vartype Report variability one : standard error (\"se\", default), confidence interval (\"ci\"), variance (\"var\") coefficient variation (\"cv\"). level (vartype = \"ci\" ) single number vector numbers indicating confidence level proportion Use methods calculate proportion may accurate confidence intervals near 0 1. Based svyciprop. prop_method Type proportion method use proportion TRUE. See svyciprop details. deff logical value indicate whether design effect returned. df (vartype = \"ci\" ) numeric value indicating degrees freedom t-distribution. default (NULL) uses degf, Inf usual survey package's default (except svyciprop. ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_mean.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate mean/proportion and its variation using survey methods — survey_mean","text":"Using survey_prop equivalent leaving x argument survey_mean setting proportion = TRUE calculates proportion represented within data, last grouping variable \"unpeeled\". interact allows \"unpeeling\" multiple variables .","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_mean.html","id":"missing-values","dir":"Reference","previous_headings":"","what":"Missing Values","title":"Calculate mean/proportion and its variation using survey methods — survey_mean","text":"calculating proportions grouping variable x, NA values affect estimated proportions unless first removed calling filter(!.na(x)). calculating means numeric variable, equivalent results obtained calling filter(!.na(x)) using survey_mean(x, na.rm = TRUE). However, better use survey_mean(x, na.rm = TRUE) simultaneously producing summaries variables might missing values rows x.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate mean/proportion and its variation using survey methods — survey_mean","text":"","code":"data(api, package = \"survey\")  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(api99_mn = survey_mean(api99),             api_diff = survey_mean(api00 - api99, vartype = c(\"ci\", \"cv\"))) #> # A tibble: 1 × 6 #>   api99_mn api99_mn_se api_diff api_diff_low api_diff_upp api_diff_cv #>      <dbl>       <dbl>    <dbl>        <dbl>        <dbl>       <dbl> #> 1     629.        10.1     32.9         28.8         37.0      0.0632  dstrata %>%   group_by(awards) %>%   summarise(api00 = survey_mean(api00)) #> # A tibble: 2 × 3 #>   awards api00 api00_se #>   <fct>  <dbl>    <dbl> #> 1 No      634.     15.6 #> 2 Yes     678.     12.0  # Use `survey_prop` calculate the proportion in each group dstrata %>%   group_by(awards) %>%   summarise(pct = survey_prop()) #> When `proportion` is unspecified, `survey_prop()` now defaults to `proportion = TRUE`. #> ℹ This should improve confidence interval coverage. #> This message is displayed once per session. #> # A tibble: 2 × 3 #>   awards   pct pct_se #>   <fct>  <dbl>  <dbl> #> 1 No     0.361 0.0349 #> 2 Yes    0.639 0.0349  # Or you can also leave  out `x` in `survey_mean`, so this is equivalent dstrata %>%   group_by(awards) %>%   summarise(pct = survey_mean()) #> # A tibble: 2 × 3 #>   awards   pct pct_se #>   <fct>  <dbl>  <dbl> #> 1 No     0.361 0.0349 #> 2 Yes    0.639 0.0349  # When there's more than one group, the last group is \"peeled\" off and proportions are # calculated within that group, each adding up to 100%. # So in this example, the sum of prop is 200% (100% for awards==\"Yes\" & # 100% for awards==\"No\") dstrata %>%   group_by(stype, awards) %>%   summarize(prop = survey_prop()) #> # A tibble: 6 × 4 #> # Groups:   stype [3] #>   stype awards  prop prop_se #>   <fct> <fct>  <dbl>   <dbl> #> 1 E     No     0.270  0.0446 #> 2 E     Yes    0.730  0.0446 #> 3 H     No     0.680  0.0666 #> 4 H     Yes    0.320  0.0666 #> 5 M     No     0.520  0.0714 #> 6 M     Yes    0.480  0.0714  # The `interact` function can help you calculate the proportion over # the interaction of two or more variables # So in this example, the sum of prop is 100% dstrata %>%   group_by(interact(stype, awards)) %>%   summarize(prop = survey_prop()) #> # A tibble: 6 × 4 #>   stype awards   prop prop_se #>   <fct> <fct>   <dbl>   <dbl> #> 1 E     No     0.193  0.0318  #> 2 E     Yes    0.521  0.0318  #> 3 H     No     0.0829 0.00812 #> 4 H     Yes    0.0390 0.00812 #> 5 M     No     0.0855 0.0117  #> 6 M     Yes    0.0789 0.0117   # Setting proportion = TRUE uses a different method for calculating confidence intervals dstrata %>%   summarise(high_api = survey_mean(api00 > 875, proportion = TRUE, vartype = \"ci\")) #> # A tibble: 1 × 3 #>   high_api high_api_low high_api_upp #>      <dbl>        <dbl>        <dbl> #> 1   0.0318       0.0129       0.0765  # level takes a vector for multiple levels of confidence intervals dstrata %>%   summarise(api99 = survey_mean(api99, vartype = \"ci\", level = c(0.95, 0.65))) #> # A tibble: 1 × 5 #>   api99 api99_low95 api99_upp95 api99_low65 api99_upp65 #>   <dbl>       <dbl>       <dbl>       <dbl>       <dbl> #> 1  629.        609.        649.        620.        639.  # Note that the default degrees of freedom in srvyr is different from # survey, so your confidence intervals might not be exact matches. To # Replicate survey's behavior, use df = Inf dstrata %>%   summarise(srvyr_default = survey_mean(api99, vartype = \"ci\"),             survey_defualt = survey_mean(api99, vartype = \"ci\", df = Inf)) #> # A tibble: 1 × 6 #>   srvyr_default srvyr_default_low srvyr_default_upp survey_defualt #>           <dbl>             <dbl>             <dbl>          <dbl> #> 1          629.              609.              649.           629. #> # ℹ 2 more variables: survey_defualt_low <dbl>, survey_defualt_upp <dbl>  comparison <- survey::svymean(~api99, dstrata) confint(comparison) # survey's default #>          2.5 %   97.5 % #> api99 609.6051 649.1846 confint(comparison, df = survey::degf(dstrata)) # srvyr's default #>          2.5 %   97.5 % #> api99 609.4828 649.3069"},{"path":"http://gdfe.co/srvyr/reference/survey_old_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the quantile and its variation using survey methods — survey_old_quantile","title":"Calculate the quantile and its variation using survey methods — survey_old_quantile","text":"Calculate quantiles complex survey data. wrapper around oldsvyquantile, version function version 4.1 survey package, available backwards compatibility. survey_old_quantile survey_old_median always called summarise. See Thomas Lumley's blogpost <https://notstatschat.rbind.io/2021/07/20/-s-new---survey-package/> details.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_old_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the quantile and its variation using survey methods — survey_old_quantile","text":"","code":"survey_old_quantile(   x,   quantiles,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   q_method = \"linear\",   f = 1,   interval_type = c(\"Wald\", \"score\", \"betaWald\", \"probability\", \"quantile\"),   ties = c(\"discrete\", \"rounded\"),   df = NULL,   ... )  survey_old_median(   x,   na.rm = FALSE,   vartype = c(\"se\", \"ci\"),   level = 0.95,   q_method = \"linear\",   f = 1,   interval_type = c(\"Wald\", \"score\", \"betaWald\", \"probability\", \"quantile\"),   ties = c(\"discrete\", \"rounded\"),   df = NULL,   ... )"},{"path":"http://gdfe.co/srvyr/reference/survey_old_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the quantile and its variation using survey methods — survey_old_quantile","text":"x variable expression quantiles vector quantiles calculate na.rm logical value indicate whether missing values dropped vartype NULL report variability (default), otherwise one : standard error (\"se\") confidence interval (\"ci\") (variance coefficient variation available). level single number indicating confidence level (one level allowed) q_method See \"method\" approxfun f See approxfun interval_type See oldsvyquantile ties See oldsvyquantile df number indicating degrees freedom t-distribution. default, Inf uses normal distribution (matches survey package). Also, effect type = \"betaWald\". ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_old_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the quantile and its variation using survey methods — survey_old_quantile","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(api99 = survey_old_quantile(api99, c(0.25, 0.5, 0.75)),             api00 = survey_old_median(api00, vartype = c(\"ci\"))) #> # A tibble: 1 × 9 #>   api99_q25 api99_q50 api99_q75 api99_q25_se api99_q50_se api99_q75_se api00 #>       <dbl>     <dbl>     <dbl>        <dbl>        <dbl>        <dbl> <dbl> #> 1      525.       631      727.         12.5         18.4         17.9  667. #> # ℹ 2 more variables: api00_low <dbl>, api00_upp <dbl>  dstrata %>%   group_by(awards) %>%   summarise(api00 = survey_old_median(api00)) #> # A tibble: 2 × 3 #>   awards api00 api00_se #>   <fct>  <dbl>    <dbl> #> 1 No      641.     23.4 #> 2 Yes     671.     18.8"},{"path":"http://gdfe.co/srvyr/reference/survey_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the quantile and its variation using survey methods — survey_quantile","title":"Calculate the quantile and its variation using survey methods — survey_quantile","text":"Calculate quantiles complex survey data. wrapper around svyquantile. survey_quantile survey_median always called summarise.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the quantile and its variation using survey methods — survey_quantile","text":"","code":"survey_quantile(   x,   quantiles,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   interval_type = c(\"mean\", \"beta\", \"xlogit\", \"asin\", \"score\", \"quantile\"),   qrule = c(\"math\", \"school\", \"shahvaish\", \"hf1\", \"hf2\", \"hf3\", \"hf4\", \"hf5\", \"hf6\",     \"hf7\", \"hf8\", \"hf9\"),   df = NULL,   ... )  survey_median(   x,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   interval_type = c(\"mean\", \"beta\", \"xlogit\", \"asin\", \"score\", \"quantile\"),   qrule = c(\"math\", \"school\", \"shahvaish\", \"hf1\", \"hf2\", \"hf3\", \"hf4\", \"hf5\", \"hf6\",     \"hf7\", \"hf8\", \"hf9\"),   df = NULL,   ... )"},{"path":"http://gdfe.co/srvyr/reference/survey_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the quantile and its variation using survey methods — survey_quantile","text":"x variable expression quantiles vector quantiles calculate na.rm logical value indicate whether missing values dropped vartype NULL report variability. Otherwise one : standard error (\"se\", default), confidence interval (\"ci\"), variance (\"var\") coefficient variation (\"cv\"). level single number indicating confidence level (one level allowed). Note may effect estimated standard errors (see svyquantile details alpha, equals 1-level). interval_type See svyquantile. Note interval_type = \"quantile\" available replicate designs, interval_type = \"score\" unavailable replicate designs. qrule See svyquantile df number indicating degrees freedom t-distribution. default, NULL, uses design degrees freedom (matches survey package). ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_quantile.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the quantile and its variation using survey methods — survey_quantile","text":"Note behavior functions changed srvyr version 1.1, old functions still (currently) supported survey_old_quantile survey_old_median need replicate old results. details changed, see Thomas Lumley's blog post changes, available : <https://notstatschat.rbind.io/2021/07/20/-s-new---survey-package/>","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the quantile and its variation using survey methods — survey_quantile","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(api99 = survey_quantile(api99, c(0.25, 0.5, 0.75)),             api00 = survey_median(api00, vartype = c(\"ci\"))) #> # A tibble: 1 × 9 #>   api99_q25 api99_q50 api99_q75 api99_q25_se api99_q50_se api99_q75_se api00 #>       <dbl>     <dbl>     <dbl>        <dbl>        <dbl>        <dbl> <dbl> #> 1       526       631       728         13.7         17.5         18.3   668 #> # ℹ 2 more variables: api00_low <dbl>, api00_upp <dbl>  dstrata %>%   group_by(awards) %>%   summarise(api00 = survey_median(api00)) #> # A tibble: 2 × 3 #>   awards api00 api00_se #>   <fct>  <dbl>    <dbl> #> 1 No       646     21.4 #> 2 Yes      676     17.7"},{"path":"http://gdfe.co/srvyr/reference/survey_ratio.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the ratio and its variation using survey methods — survey_ratio","title":"Calculate the ratio and its variation using survey methods — survey_ratio","text":"Calculate ratios complex survey data. wrapper around svyratio. survey_ratio always called summarise.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_ratio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the ratio and its variation using survey methods — survey_ratio","text":"","code":"survey_ratio(   numerator,   denominator,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   deff = FALSE,   df = NULL,   ... )"},{"path":"http://gdfe.co/srvyr/reference/survey_ratio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the ratio and its variation using survey methods — survey_ratio","text":"numerator numerator ratio denominator denominator ratio na.rm logical value indicate whether missing values dropped vartype Report variability one : standard error (\"se\", default), confidence interval (\"ci\"), variance (\"var\") coefficient variation (\"cv\"). level single number vector numbers indicating confidence level deff logical value indicate whether design effect returned. df (vartype = \"ci\" ) numeric value indicating degrees freedom t-distribution. default (NULL) uses degf, Inf usual survey package's default (except svyciprop. ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_ratio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the ratio and its variation using survey methods — survey_ratio","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(enroll = survey_ratio(api00, api99, vartype = c(\"ci\", \"cv\"))) #> # A tibble: 1 × 4 #>   enroll enroll_low enroll_upp enroll_cv #>    <dbl>      <dbl>      <dbl>     <dbl> #> 1   1.05       1.04       1.06   0.00351  dstrata %>%   group_by(awards) %>%   summarise(api00 = survey_ratio(api00, api99)) #> # A tibble: 2 × 3 #>   awards api00 api00_se #>   <fct>  <dbl>    <dbl> #> 1 No      1.02  0.00343 #> 2 Yes     1.07  0.00478  # level takes a vector for multiple levels of confidence intervals dstrata %>%   summarise(enroll = survey_ratio(api99, api00, vartype = \"ci\", level = c(0.95, 0.65))) #> # A tibble: 1 × 5 #>   enroll enroll_low95 enroll_upp95 enroll_low65 enroll_upp65 #>    <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1  0.950        0.944        0.957        0.947        0.953  # Note that the default degrees of freedom in srvyr is different from # survey, so your confidence intervals might not exactly match. To # replicate survey's behavior, use df = Inf dstrata %>%   summarise(srvyr_default = survey_total(api99, vartype = \"ci\"),             survey_defualt = survey_total(api99, vartype = \"ci\", df = Inf)) #> # A tibble: 1 × 6 #>   srvyr_default srvyr_default_low srvyr_default_upp survey_defualt #>           <dbl>             <dbl>             <dbl>          <dbl> #> 1      3898472.          3775136.          4021807.       3898472. #> # ℹ 2 more variables: survey_defualt_low <dbl>, survey_defualt_upp <dbl>  comparison <- survey::svytotal(~api99, dstrata) confint(comparison) # survey's default #>         2.5 %  97.5 % #> api99 3775894 4021049 confint(comparison, df = survey::degf(dstrata)) # srvyr's default #>         2.5 %  97.5 % #> api99 3775136 4021807"},{"path":"http://gdfe.co/srvyr/reference/survey_tally.html","id":null,"dir":"Reference","previous_headings":"","what":"Count/tally survey weighted observations by group — survey_tally","title":"Count/tally survey weighted observations by group — survey_tally","text":"Analogous tally count, calculates survey weighted count observations. survey_tally call survey_total empty (resulting count group) wt specified (resulting survey weighted total wt). survey_count similar, calls group_by calculating count returns data original groupings.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_tally.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count/tally survey weighted observations by group — survey_tally","text":"","code":"survey_tally(   x,   wt,   sort = FALSE,   name = \"n\",   vartype = c(\"se\", \"ci\", \"var\", \"cv\") )  survey_count(   x,   ...,   wt = NULL,   sort = FALSE,   name = \"n\",   .drop = dplyr::group_by_drop_default(x),   vartype = c(\"se\", \"ci\", \"var\", \"cv\") )"},{"path":"http://gdfe.co/srvyr/reference/survey_tally.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count/tally survey weighted observations by group — survey_tally","text":"x tbl_svy object, created as_survey related functions. wt (Optional) variable weight (addition survey weights, always used). left unspecified, tally() use variable named \"n\" one exists, count() . Override behavior specifying wt = NULL. sort Whether sort results (defaults FALSE) name Name count variable created (defaults n). variable already exists, add \"n\" end . vartype types variation estimates calculate, passed survey_total. ... Variables group , passed group_by(). .drop .drop = TRUE, empty groups dropped, see group_by documentation details.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_tally.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Count/tally survey weighted observations by group — survey_tally","text":"n already exists, tally use weight, count .","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_tally.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count/tally survey weighted observations by group — survey_tally","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   group_by(awards) %>%   survey_tally() #> # A tibble: 2 × 3 #>   awards     n  n_se #>   <fct>  <dbl> <dbl> #> 1 No     2236.  216. #> 2 Yes    3958.  216.  dstrata %>%   survey_count(awards) #> # A tibble: 2 × 3 #>   awards     n  n_se #>   <fct>  <dbl> <dbl> #> 1 No     2236.  216. #> 2 Yes    3958.  216."},{"path":"http://gdfe.co/srvyr/reference/survey_total.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the total and its variation using survey methods — survey_total","title":"Calculate the total and its variation using survey methods — survey_total","text":"Calculate totals complex survey data. wrapper around svytotal. survey_total always called summarise.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the total and its variation using survey methods — survey_total","text":"","code":"survey_total(   x,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\", \"cv\"),   level = 0.95,   deff = FALSE,   df = NULL,   ... )"},{"path":"http://gdfe.co/srvyr/reference/survey_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the total and its variation using survey methods — survey_total","text":"x variable expression, empty na.rm logical value indicate whether missing values dropped vartype Report variability one : standard error (\"se\", default), confidence interval (\"ci\"), variance (\"var\") coefficient variation (\"cv\"). level single number vector numbers indicating confidence level deff logical value indicate whether design effect returned. df (vartype = \"ci\" ) numeric value indicating degrees freedom t-distribution. default (NULL) uses degf, Inf usual survey package's default. ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_total.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the total and its variation using survey methods — survey_total","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(enroll_tot = survey_total(enroll),             tot_meals = survey_total(enroll * meals / 100, vartype = c(\"ci\", \"cv\"))) #> # A tibble: 1 × 6 #>   enroll_tot enroll_tot_se tot_meals tot_meals_low tot_meals_upp tot_meals_cv #>        <dbl>         <dbl>     <dbl>         <dbl>         <dbl>        <dbl> #> 1   3687178.       117319.  1753775.      1528167.      1979384.       0.0652  dstrata %>%   group_by(awards) %>%   summarise(api00 = survey_total(enroll)) #> # A tibble: 2 × 3 #>   awards    api00 api00_se #>   <fct>     <dbl>    <dbl> #> 1 No     1627217.  147847. #> 2 Yes    2059960.  143734.  # Leave x empty to calculate the total in each group dstrata %>%   group_by(awards) %>%   summarise(pct = survey_total()) #> # A tibble: 2 × 3 #>   awards   pct pct_se #>   <fct>  <dbl>  <dbl> #> 1 No     2236.   216. #> 2 Yes    3958.   216.  # level takes a vector for multiple levels of confidence intervals dstrata %>%   summarise(enroll = survey_total(enroll, vartype = \"ci\", level = c(0.95, 0.65))) #> # A tibble: 1 × 5 #>     enroll enroll_low95 enroll_upp95 enroll_low65 enroll_upp65 #>      <dbl>        <dbl>        <dbl>        <dbl>        <dbl> #> 1 3687178.     3455815.     3918540.     3577271.     3797084.  # Note that the default degrees of freedom in srvyr is different from # survey, so your confidence intervals might not exactly match. To # replicate survey's behavior, use df = Inf dstrata %>%   summarise(srvyr_default = survey_total(api99, vartype = \"ci\"),             survey_defualt = survey_total(api99, vartype = \"ci\", df = Inf)) #> # A tibble: 1 × 6 #>   srvyr_default srvyr_default_low srvyr_default_upp survey_defualt #>           <dbl>             <dbl>             <dbl>          <dbl> #> 1      3898472.          3775136.          4021807.       3898472. #> # ℹ 2 more variables: survey_defualt_low <dbl>, survey_defualt_upp <dbl>  comparison <- survey::svytotal(~api99, dstrata) confint(comparison) # survey's default #>         2.5 %  97.5 % #> api99 3775894 4021049 confint(comparison, df = survey::degf(dstrata)) # srvyr's default #>         2.5 %  97.5 % #> api99 3775136 4021807"},{"path":"http://gdfe.co/srvyr/reference/survey_var.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the population variance and its variation using survey methods — survey_var","title":"Calculate the population variance and its variation using survey methods — survey_var","text":"Calculate population variance complex survey data. wrapper around svyvar. survey_var always called summarise.","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_var.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the population variance and its variation using survey methods — survey_var","text":"","code":"survey_var(   x,   na.rm = FALSE,   vartype = c(\"se\", \"ci\", \"var\"),   level = 0.95,   df = NULL,   ... )  survey_sd(x, na.rm = FALSE, ...)"},{"path":"http://gdfe.co/srvyr/reference/survey_var.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the population variance and its variation using survey methods — survey_var","text":"x variable expression, empty na.rm logical value indicate whether missing values dropped vartype Report variability one : standard error (\"se\", default) variance (\"var\") (confidence intervals coefficient variation available). level (vartype = \"ci\" ) single number vector numbers indicating confidence level. df (vartype = \"ci\" ) numeric value indicating degrees freedom t-distribution. default (Inf) equivalent using normal distribution case population variance statistics little reason use values (see Details). ... Ignored","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_var.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the population variance and its variation using survey methods — survey_var","text":"aware confidence intervals population variance statistic computed package survey using t normal (df=Inf) distribution (.e. symmetric distributions). poor approximation even one conditions met: sampling design degrees freedom, analyzed variable normally distributed, huge variation sampling probabilities survey design. careful using confidence intervals population variance statistics especially performing analysis within subsets data using grouped survey objects. Sampling distribution variance statistic general asymmetric (chi-squared case simple random sampling normally distributed variable) analyzed variable normally distributed huge variation sampling probabilities survey design () converge normality slowly (growing number survey design degrees freedom).","code":""},{"path":"http://gdfe.co/srvyr/reference/survey_var.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the population variance and its variation using survey methods — survey_var","text":"","code":"library(survey) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(api99_var = survey_var(api99),             api99_sd = survey_sd(api99)) #> # A tibble: 1 × 3 #>   api99_var api99_var_se api99_sd #>       <dbl>        <dbl>    <dbl> #> 1    16518.        1336.     129.  dstrata %>%   group_by(awards) %>%   summarise(api00_var = survey_var(api00),             api00_sd = survey_sd(api00)) #> # A tibble: 2 × 4 #>   awards api00_var api00_var_se api00_sd #>   <fct>      <dbl>        <dbl>    <dbl> #> 1 No        15669.        2021.     125. #> 2 Yes       14309.        1509.     120.  # standard deviation and variance of the population variance estimator # are available with vartype argument # (but not for the population standard deviation estimator) dstrata %>%   summarise(api99_variance = survey_var(api99, vartype = c(\"se\", \"var\"))) #> # A tibble: 1 × 3 #>   api99_variance api99_variance_se api99_variance_var #>            <dbl>             <dbl>              <dbl> #> 1         16518.             1336.           1785755."},{"path":"http://gdfe.co/srvyr/reference/svychisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Chisquared tests of association for survey data. — svychisq","title":"Chisquared tests of association for survey data. — svychisq","text":"Chisquared tests association survey data.","code":""},{"path":"http://gdfe.co/srvyr/reference/svychisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Chisquared tests of association for survey data. — svychisq","text":"formula See details svychisq design See details svychisq na.rm See details svychisq ... See details svychisq","code":""},{"path":"http://gdfe.co/srvyr/reference/tbl_svy.html","id":null,"dir":"Reference","previous_headings":"","what":"tbl_svy object. — tbl_svy","title":"tbl_svy object. — tbl_svy","text":"tbl_svy wraps locally stored svydesign adds methods dplyr single-table verbs like mutate, group_by summarise. Create tbl_svy using as_survey_design.","code":""},{"path":"http://gdfe.co/srvyr/reference/tbl_svy.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"tbl_svy object. — tbl_svy","text":"tbl_df implements methods dplyr. select rename Select rename variables survey's dataset. mutate transmute Modify create variables survey's dataset. group_by summarise Get descriptive statistics survey.","code":""},{"path":"http://gdfe.co/srvyr/reference/tbl_svy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tbl_svy object. — tbl_svy","text":"","code":"library(survey) library(dplyr) data(api) svy <- as_survey_design(apistrat, strata = stype, weights = pw) svy #> Stratified Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>   - strata: stype  #>   - weights: pw  #> Data variables:  #>   - cds (chr), stype (fct), name (chr), sname (chr), snum (dbl), dname (chr), #>     dnum (int), cname (chr), cnum (int), flag (int), pcttest (int), api00 #>     (int), api99 (int), target (int), growth (int), sch.wide (fct), comp.imp #>     (fct), both (fct), awards (fct), meals (int), ell (int), yr.rnd (fct), #>     mobility (int), acs.k3 (int), acs.46 (int), acs.core (int), pct.resp (int), #>     not.hsg (int), hsg (int), some.col (int), col.grad (int), grad.sch (int), #>     avg.ed (dbl), full (int), emer (int), enroll (int), api.stu (int), pw #>     (dbl), fpc (dbl)  # Data manipulation verbs --------------------------------------------------- filter(svy, pcttest > 95) #> Stratified Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>   - strata: stype  #>   - weights: pw  #> Data variables:  #>   - cds (chr), stype (fct), name (chr), sname (chr), snum (dbl), dname (chr), #>     dnum (int), cname (chr), cnum (int), flag (int), pcttest (int), api00 #>     (int), api99 (int), target (int), growth (int), sch.wide (fct), comp.imp #>     (fct), both (fct), awards (fct), meals (int), ell (int), yr.rnd (fct), #>     mobility (int), acs.k3 (int), acs.46 (int), acs.core (int), pct.resp (int), #>     not.hsg (int), hsg (int), some.col (int), col.grad (int), grad.sch (int), #>     avg.ed (dbl), full (int), emer (int), enroll (int), api.stu (int), pw #>     (dbl), fpc (dbl) select(svy, starts_with(\"acs\")) # variables used in survey design are automatically kept #> Stratified Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>   - strata: stype  #>   - weights: pw  #> Data variables:  #>   - acs.k3 (int), acs.46 (int), acs.core (int) summarise(svy, col.grad = survey_mean(col.grad)) #> # A tibble: 1 × 2 #>   col.grad col.grad_se #>      <dbl>       <dbl> #> 1     19.9        1.06 mutate(svy, api_diff = api00 - api99) #> Stratified Independent Sampling design (with replacement) #> Called via srvyr #> Sampling variables: #>   - ids: `1`  #>   - strata: stype  #>   - weights: pw  #> Data variables:  #>   - cds (chr), stype (fct), name (chr), sname (chr), snum (dbl), dname (chr), #>     dnum (int), cname (chr), cnum (int), flag (int), pcttest (int), api00 #>     (int), api99 (int), target (int), growth (int), sch.wide (fct), comp.imp #>     (fct), both (fct), awards (fct), meals (int), ell (int), yr.rnd (fct), #>     mobility (int), acs.k3 (int), acs.46 (int), acs.core (int), pct.resp (int), #>     not.hsg (int), hsg (int), some.col (int), col.grad (int), grad.sch (int), #>     avg.ed (dbl), full (int), emer (int), enroll (int), api.stu (int), pw #>     (dbl), fpc (dbl), api_diff (int)  # Group by operations ------------------------------------------------------- # To calculate survey svy_group <- group_by(svy, dname)  summarise(svy, col.grad = survey_mean(col.grad),           api00 = survey_mean(api00, vartype = \"ci\")) #> # A tibble: 1 × 5 #>   col.grad col.grad_se api00 api00_low api00_upp #>      <dbl>       <dbl> <dbl>     <dbl>     <dbl> #> 1     19.9        1.06  662.      643.      681."},{"path":"http://gdfe.co/srvyr/reference/tbl_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"List variables produced by a tbl. — tbl_vars","title":"List variables produced by a tbl. — tbl_vars","text":"List variables produced tbl.","code":""},{"path":"http://gdfe.co/srvyr/reference/tbl_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List variables produced by a tbl. — tbl_vars","text":"x tbl object","code":""},{"path":"http://gdfe.co/srvyr/reference/uninteract.html","id":null,"dir":"Reference","previous_headings":"","what":"Break interaction vectors back into component columns — uninteract","title":"Break interaction vectors back into component columns — uninteract","text":"function generally needed users summarise automatically un-interacts interaction columns .","code":""},{"path":"http://gdfe.co/srvyr/reference/uninteract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Break interaction vectors back into component columns — uninteract","text":"","code":"uninteract(x)  # S3 method for class 'srvyr_interaction' uninteract(x)  # S3 method for class 'data.frame' uninteract(x)  is.interaction(x)"},{"path":"http://gdfe.co/srvyr/reference/uninteract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Break interaction vectors back into component columns — uninteract","text":"x Either srvyr_interaction column data.frame","code":""},{"path":"http://gdfe.co/srvyr/reference/uninteract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Break interaction vectors back into component columns — uninteract","text":"data.frame","code":""},{"path":"http://gdfe.co/srvyr/reference/unweighted.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the an unweighted summary statistic from a survey — unweighted","title":"Calculate the an unweighted summary statistic from a survey — unweighted","text":"Calculate unweighted summaries survey dataset, just normal data.frame summarise. Though possible use regular functions directly, survey package always remove rows filtering (instead setting weight 0), can sometimes give bad results. See examples details.","code":""},{"path":"http://gdfe.co/srvyr/reference/unweighted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the an unweighted summary statistic from a survey — unweighted","text":"","code":"unweighted(...)"},{"path":"http://gdfe.co/srvyr/reference/unweighted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the an unweighted summary statistic from a survey — unweighted","text":"... variables expressions, calculated unweighted data.frame behind tbl_svy object.","code":""},{"path":"http://gdfe.co/srvyr/reference/unweighted.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate the an unweighted summary statistic from a survey — unweighted","text":"Uses tidy evaluation semantics want use wrapper functions based variable names, must use tidy evaluation, see examples , documentation nse-force, dplyr vignette called 'programming' information.","code":""},{"path":"http://gdfe.co/srvyr/reference/unweighted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate the an unweighted summary statistic from a survey — unweighted","text":"","code":"library(survey) library(dplyr) data(api)  dstrata <- apistrat %>%   as_survey_design(strata = stype, weights = pw)  dstrata %>%   summarise(api99_unw = unweighted(mean(api99)),             n = unweighted(n())) #> # A tibble: 1 × 2 #>   api99_unw     n #>       <dbl> <int> #> 1      625.   200  dstrata %>%   group_by(stype) %>%   summarise(api_diff_unw = unweighted(mean(api00 - api99))) #> # A tibble: 3 × 2 #>   stype api_diff_unw #>   <fct>        <dbl> #> 1 E            38.6  #> 2 H             8.46 #> 3 M            26.4    # Some survey designs, like ones with raked weights, are not removed # when filtered to preserve the structure. So if you don't use `unweighted()` # your results can be wrong. # Declare basic clustered design ---- cluster_design <- as_survey_design(   .data = apiclus1,   id = dnum,   weights = pw,   fpc = fpc )  # Add raking weights for school type ---- pop.types <- data.frame(stype=c(\"E\",\"H\",\"M\"), Freq=c(4421,755,1018)) pop.schwide <- data.frame(sch.wide=c(\"No\",\"Yes\"), Freq=c(1072,5122))  raked_design <- rake(   cluster_design,   sample.margins = list(~stype,~sch.wide),   population.margins = list(pop.types, pop.schwide) )  raked_design %>% filter(cname != \"Alameda\") %>%   group_by(cname) %>%   summarize(     direct_unw_mean = mean(api99),     wrapped_unw_mean = unweighted(mean(api99))   ) %>%   filter(cname == \"Alameda\") #> # A tibble: 1 × 3 #>   cname   direct_unw_mean wrapped_unw_mean #>   <chr>             <dbl>            <dbl> #> 1 Alameda             609              NaN  # Notice how the results are different when using `unweighted()`"},{"path":[]},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-130","dir":"Changelog","previous_headings":"","what":"srvyr 1.3.0","title":"srvyr 1.3.0","text":"CRAN release: 2024-08-19 as_survey_rep() now argument degf, corresponding argument survey function svrepdesign(). argument can useful large data sets, since specifying value degf avoids calculation can slow large data sets, (#171, @bschneidr). Speed improvements summarize many groups (#168, thanks @etiennebacher) Improvements printing (#166, thanks @szimmer) Fix situations filtering calibrated/PPS survey design filtering 0 rows (#159, @bschneidr) Fix anonymous functions rename_with() (#172, thanks @josiahg2) Fix chaining filter & group_by database backed surveys (#173, thanks @jamgreen) Fix comma separated filters database backed surveys (#173, thanks @jamgreen) Fix survey_prop 0 observations found group (#156, thanks @yannsay-impact) groups now preserved as_survey related functions called grouped_df (#178, thanks @rossellhayes). Fix .argument works like dplyr summarize mutate (#179, thanks @szimmer) mutate now default unpacks srvyr summary statistics like survey_mean() instead leaving packed","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-120","dir":"Changelog","previous_headings":"","what":"srvyr 1.2.0","title":"srvyr 1.2.0","text":"CRAN release: 2023-02-21 survey_prop() now uses proportions default, confidence interval improve coverage, mean results may slightly change (#141, #142, thanks @szimmer) New function survey_corr() calculates correlation 2 variables, (#150, #151, thanks @szimmer & @bschneidr) Added method dplyr::reframe srvyr’s objects function as_survey_rep() now accepts type=\"ACS\" type=\"successive-difference\" user-supplied replicate weights. (#153, thanks @bschneidr) Squashed deprecation warnings introduced dplyr 1.1.0 (now minimum version)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-112","dir":"Changelog","previous_headings":"","what":"srvyr 1.1.2","title":"srvyr 1.1.2","text":"CRAN release: 2022-10-05 Fix upcoming version tidyselect (#147, thanks @hadley)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-111","dir":"Changelog","previous_headings":"","what":"srvyr 1.1.1","title":"srvyr 1.1.1","text":"CRAN release: 2022-02-20 Add function cur_svy_wts() access survey weights (#136, #139, thanks @ray-p144 @bschneidr) Allow access survey context functions like cur_svy() cur_svy_wts() mutate filter (#138, #139, thanks @ray-p144 @bschneidr) Improve behavior interact() using cascade()(#133, thanks @szimmer) Fix bug non-standard names grouping variables (like 1234) cascade (#132, thanks @szimmer)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-110","dir":"Changelog","previous_headings":"","what":"srvyr 1.1.0","title":"srvyr 1.1.0","text":"CRAN release: 2021-09-29 Uses new quantile functions provided version 4.1 survey package. old survey quantile functions can accessed survey_old_quantile() survey_old_median() Adds new function interact makes easier calculate proportions among interacted groups “Filering joins” (anti_join semi_join) now available srvyr objects. must put tbl_svy object first. (#65, #120, @bschneidr) Auto-unpacking data.frames works even inside named data.frame column (like one created dplyr::across). (#129) Miscellaneous documentation improvements (#119, #126, #127)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-101","dir":"Changelog","previous_headings":"","what":"srvyr 1.0.1","title":"srvyr 1.0.1","text":"CRAN release: 2021-03-28 survey_mean() x longer errors grouping variables (#117)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-100","dir":"Changelog","previous_headings":"","what":"srvyr 1.0.0","title":"srvyr 1.0.0","text":"CRAN release: 2020-12-01 summarize rearchitected, dplyr::across() now works within dplyr functions like dplyr::cur_group(), dplyr::cur_group_id(), dplyr::cur_data() work (well new analogous functions srvyr-specific cur_svy() cur_svy_full()) objects summarize refer output summarize input. Meaning code looks like : now error calculates mean api99 using inside calculation api_diff. behavior better matches dplyr’s likely kept. Support group_map()/group_walk()/group_map_dfr(), group_split(), group_nest() nest_by() added tbl_svy objects. Support drop_na tidyr (#107). as_survey() as_survey_() now idempotent: given srvyr survey object (tbl_srv), return unchanged. extra arguments provided, ignored warning (#97, thanks @krivit). rename_with() now works surveys (#96, thanks @krivit).","code":"dstrata %>% summarize(api99 = survey_mean(api99), api_diff = survey_mean(api00 - api99))"},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-040","dir":"Changelog","previous_headings":"","what":"srvyr 0.4.0","title":"srvyr 0.4.0","text":"CRAN release: 2020-07-30 Fix ensure ordered factors can used grouping variables inputs survey_count survey_tally (#92, thanks reporting @szimmer & @walkerke & fixing @bschneidr). Fix ensure numeric values can used grouping variables (#78 & #74, thanks reporting @tzoltak & fix @bschneidr) improvements dplyr 1.0 (#79) transmute() now works (thanks reporting @caayala), summarise()’s .groups argument respected, multi-row returns summarise() work. (Unfortunately new across() function isn’t quite supported summarise() yet, hopefully come soon)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-0310","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.10","title":"srvyr 0.3.10","text":"CRAN release: 2020-05-26 Another fix upcoming dplyr Fix vignette changes vardpoor package","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-039","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.9","title":"srvyr 0.3.9","text":"CRAN release: 2020-05-04 Fix upcoming version dplyr (thanks @romainfrancois)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-038","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.8","title":"srvyr 0.3.8","text":"CRAN release: 2020-03-07 unweighted now evaluates right context provide correct error incorrectly interpolated function used (#70, thanks reporting @tlmcmurry) filter_at works now, (#57, thanks reporting @dcaseykc & helping @bschneidr). Fix upcoming version tibble (#72).","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-037","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.7","title":"srvyr 0.3.7","text":"CRAN release: 2020-01-17 filtering grouped survey designs now works correctly (#54, thanks reporting @dcaseykc) Added function pull (#63, thanks @dcaseykc) df parameter now set degrees freedom survey quantiles variance match functions. Updated tests work upcoming version survey (#66).","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-036","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.6","title":"srvyr 0.3.6","text":"CRAN release: 2019-10-05 Small update quasiquotation syntax inside unweighted improve consistency recent rlang updates (#54). Added functions survey_tally() survey_count() (#53)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-035","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.5","title":"srvyr 0.3.5","text":"CRAN release: 2019-07-09 New functions survey_var survey_sd calculate population variance standard deviaton. Computation standard errors survey_ functions can suppressed setting vartype=NULL (#45, thanks @tzoltak). Fixed issue ’d get error summarize components returned different lengths data - usually factor levels present data (#49). Removed references MonetDBLite since removed CRAN. Small updates replace soft-deprecated dplyr functions tibble tidyselect equivalents (#52, thanks @bschneidr).","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-034","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.4","title":"srvyr 0.3.4","text":"CRAN release: 2019-01-20 survey_mean/survey_total allow deff=\"replace\" like survey package forbearers. (#46, thanks @mandes95) Fixes new release dplyr","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-033","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.3","title":"srvyr 0.3.3","text":"CRAN release: 2018-05-22 Add warning explain design effects calculated proportions. (#39, thanks @mlaviolet) Remove dependency stringr tests add DBI suggests test dependencies correctly specified (#40, thanks CRAN!)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-032","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.2","title":"srvyr 0.3.2","text":"CRAN release: 2018-05-04 Bug fix calculating multiple quantiles grouped data (#38, thanks @iantperry)","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-031","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.1","title":"srvyr 0.3.1","text":"CRAN release: 2018-03-10 converting survey db-backed survey srvyr one srvyr now tries capture updates ’ve already sent. dbplyr can convert function, bring update. can’t warn (#35). Small bug fixes, mostly CRAN checks, running CI services, upstream rev dep checks.","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-030","dir":"Changelog","previous_headings":"","what":"srvyr 0.3.0","title":"srvyr 0.3.0","text":"CRAN release: 2018-01-24 srvyr now uses tidy evaluation rlang. “underscore” functions soft deprecated favor quosure splicing. See dplyr’s vignette “programming” details. almost cases, old syntax still work, one exception: standard evaluation function as_survey_twophase_() changed slightly entire list inside quotation. Datbase support rewritten. faster now doesn’t require unique identifier. also can now convert survey db-backed surveys srvyr as_survey. srvyr now pkgdown site, check http://gdfe.co/srvyr/","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-022","dir":"Changelog","previous_headings":"","what":"srvyr 0.2.2","title":"srvyr 0.2.2","text":"CRAN release: 2017-06-23 Remove test blocking survey update","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-021","dir":"Changelog","previous_headings":"","what":"srvyr 0.2.1","title":"srvyr 0.2.1","text":"CRAN release: 2017-04-26 Added support dplyr mutate_at/_if/_all summarize_at/_if/_all srvyr surveys. Fixed bugs introduced dplyr 0.6. version srvyr work old versions dplyr 0.6, may full warnings update dplyr. Full support new dplyr coming soon.","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-020","dir":"Changelog","previous_headings":"","what":"srvyr 0.2.0","title":"srvyr 0.2.0","text":"CRAN release: 2016-09-26 Added support database backed surveys, using dplyr’s handling DBI. problems interacting survey package twophase designs work.","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-012","dir":"Changelog","previous_headings":"","what":"srvyr 0.1.2","title":"srvyr 0.1.2","text":"CRAN release: 2016-06-28 Fixed problem confidence levels passed quantiles Added deff parameter survey_mean(), survey_total() survey_median(), df parameter functions survey_quantile() / survey_median(). summarize mutate match dplyr’s behavior arguments aren’t named (uses dplyr::auto_name())","code":""},{"path":"http://gdfe.co/srvyr/news/index.html","id":"srvyr-011","dir":"Changelog","previous_headings":"","what":"srvyr 0.1.1","title":"srvyr 0.1.1","text":"CRAN release: 2016-04-03 New function cascade summarizes groups, cascades create summary statistics groups groups. Fixed bug confidence intervals survey_total() groups. Fixed issues upcoming version dplyr.","code":""}]
